{"version":3,"file":"confirm-subscription.component.js","sourceRoot":"","sources":["../../src/app/confirm-subscription/confirm-subscription.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAU,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AACxE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,MAAM,IAAI,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/D,OAAO,EAAE,WAAW,EAAa,UAAU,EAAE,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAE,cAAc,EAAU,MAAM,EAAE,MAAM,iBAAiB,CAAC;;IAwBf,gDAAa;IAM7D,sCACU,iBACR,cAA8B,EACvB,aACC,OACR,MAAc;QALhB,YAOE,kBAAM,8BAA8B,EAAE,cAAc,EAAE,MAAM,CAAC,SAC9D;QAPS,qBAAe,GAAf,eAAe;QAEhB,iBAAW,GAAX,WAAW;QACV,WAAK,GAAL,KAAK;wBATK,IAAI,YAAY,EAAmB;sBAEvC,EAAE;kCACU,EAAE;;KAU7B;;;;IAED,+CAAQ;;;IAAR;QACE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,EAAE,4BAA0B,IAAI,CAAC,aAAe,CAAC,CAAC;QAClH,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;;;;IAED,0DAAmB;;;IAAnB;QAAA,iBAmBC;QAlBC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,EAAE,kDAAgD,IAAI,CAAC,aAAa,MAAG,CAAC,CAAC;QACzI,IAAI,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,MAAM;iBACd,GAAG,CAAC,UAAC,MAAc,IAAK,OAAA,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,SAAS,CACrD,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAA/B,CAA+B,EAC3C,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAA/B,CAA+B,EACxC,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,EAAzC,CAAyC,CAC9C,CAAC;YAEJ,IAAI,CAAC,KAAK,CAAC,MAAM;iBACd,GAAG,CAAC,UAAC,MAAc,IAAK,OAAA,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC,SAAS,CACjE,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,EAA3C,CAA2C,EACvD,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAA/B,CAA+B,EACxC,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,EAAzC,CAAyC,CAC9C,CAAC;SACL;QAAC,KAAK,CAAC,CAAC,iBAAA,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;SACjC;KACF;;;;;IAED,mEAA4B;;;;IAA5B,UAA6B,KAAa;QACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;KACF;;;;;IAED,uDAAgB;;;;IAAhB,UAAiB,UAAkB;QACjC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;SACzB;KACF;IAED;;OAEG;;;;;IACH,gDAAS;;;;IAAT;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAClC,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC;YAC3C,iBAAiB,EAAE,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,CAAC,QAAQ,CAAC;SACjE,CAAC,CAAC;KACJ;;;;IAED,iDAAU;;;IAAV;QAAA,iBASC;QARC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;QACzF,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,qBAAI,KAAK,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACjG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,SAAS,CACrD,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAA3B,CAA2B,EACvC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,KAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAApE,CAAoE,EAC7E,cAAM,OAAA,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,aAAa,CAAC,EAAtC,CAAsC,CAC7C,CAAC;KACH;;;;;IAED,mDAAY;;;;IAAZ,UAAa,QAAyC;QACpD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,EAAE,+CAA6C,IAAI,CAAC,eAAe,CAAC,WAAW,gBAAW,IAAI,CAAC,aAAa,MAAG,CAAC,CAAC;QACjL,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,EAAE,iDAAiD,CAAC,CAAC;gBACrH,IAAI,CAAC,OAAO,CAAC,IAAI,mBAAC,QAA2B,EAAC,CAAC;aAChD;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,KAAK,EAAK,IAAI,CAAC,aAAa,sBAAmB,CAAC,CAAC;gBACtG,IAAI,CAAC,kBAAkB,mBAAC,QAAyB,EAAC,CAAC;aACpD;SACF;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,KAAK,EAAE,6EAA6E,CAAC,CAAC;SAC5I;KACF;;gBA9GF,SAAS,SAAC;oBACT,QAAQ,EAAE,yBAAyB;oBACnC,QAAQ,EAAE,m1BAiBF;iBACT;;;;gBA1BQ,0BAA0B;gBAC1B,cAAc;gBACd,WAAW;gBACX,cAAc;gBAAU,MAAM;;;4BAyBpC,MAAM;;uCA9BT;EA6BkD,aAAa;SAAlD,4BAA4B","sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { ComponentBase } from 'buildmotion-core';\nimport { BuildMotionSecurityService, ConfirmationToken } from '..';\nimport { LoggingService, Severity } from 'buildmotion-logging';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { ServiceResponse, ErrorResponse } from 'buildmotion-foundation';\n\n@Component({\n  selector: 'bm-confirm-subscription',\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\n    <div class=\"md-form\">\n      <i class=\"fa fa-envelope prefix\"></i>\n      <input type=\"text\" id=\"UserName\" class=\"form-control\" formControlName=\"UserName\">\n      <label for=\"UserName\">Your email address.</label>\n    </div>\n  \n    <div class=\"md-form\">\n      <i class=\"fa fa-person prefix\"></i>\n      <input type=\"text\" id=\"ConfirmationToken\" class=\"form-control\" formControlName=\"ConfirmationToken\">\n      <label for=\"ConfirmationToken\">Enter token from email.</label>\n    </div>\n  \n    <div class=\"text-xs-center\">\n      <button class=\"btn btn-lime\" type=\"submit\">Confirm Account</button>\n    </div>\n  </form>`\n})\nexport class ConfirmSubscriptionComponent extends ComponentBase implements OnInit {\n  @Output() confirm = new EventEmitter<ServiceResponse>();\n  _form: FormGroup;\n  email: string = '';\n  confirmationToken: string = '';\n\n  constructor(\n    private securityService: BuildMotionSecurityService,\n    loggingService: LoggingService,\n    public formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    router: Router\n  ) {  \n    super(`ConfirmSubscriptionComponent`, loggingService, router);\n  }\n\n  ngOnInit() {\n    this.loggingService.log(this.componentName, Severity.Information, `Running [ngOnInit] for ${this.componentName}`);\n    this.retrieveQueryParams();\n  }\n\n  retrieveQueryParams() {\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to retrieve the [queryParams] from ${this.componentName}.`);\n    try {\n      this.route.params\n        .map((params: Params) => (params['email'])).subscribe(\n        response => this.handleEmailParam(response),\n        error => this.handleServiceErrors(error),\n        () => this.finishRequest('retrieveQueryParams')\n        );\n\n      this.route.params\n        .map((params: Params) => (params['confirmationToken'])).subscribe(\n        response => this.handleConfirmationTokenParam(response),\n        error => this.handleServiceErrors(error),\n        () => this.finishRequest('retrieveQueryParams')\n        );\n    } catch (error) {\n      this.handleServiceErrors(error);\n    }\n  }\n\n  handleConfirmationTokenParam(token: string) {\n    if (token) {\n      this.confirmationToken = token;\n      this.buildForm(); // begin form build after the params are retrieved from the url;\n    }\n  }\n\n  handleEmailParam(emailParam: string) {\n    if (emailParam) {\n      this.email = emailParam;\n    }\n  }\n\n  /**\n   * Use to build the form for the specified target entity.\n   */\n  buildForm() {\n    this._form = this.formBuilder.group({\n      UserName: [this.email, Validators.required],\n      ConfirmationToken: [this.confirmationToken, Validators.required]\n    });\n  }\n\n  submitForm() {\n    this.loggingService.log(this.componentName, Severity.Information, `Form: {form | json}`);\n    this.resetAlertNotifications();\n    let token = new ConfirmationToken(this._form.value.UserName, this._form.value.ConfirmationToken);\n    this.securityService.confirmSubscriber(token).subscribe(\n      response => this.handleSubmit(response),\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\n      () => this.finishRequest(this.componentName)\n    );\n  }\n\n  handleSubmit(response: ServiceResponse | ErrorResponse ) {\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to handle the response from the ${this.securityService.serviceName} in the ${this.componentName}.`);\n    if (response) {\n      if (response.IsSuccess) {\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed subscriber confirmation.`);\n        this.confirm.emit(response as ServiceResponse);\n      } else {\n        this.loggingService.log(this.componentName, Severity.Error, `${this.componentName}; Status is fail.`);\n        this.showResponseErrors(response as ErrorResponse);\n      }\n    } else {\n      this.loggingService.log(this.componentName, Severity.Error, 'Unexpected service error...I guess the application pooped its pants, ouch!!');\n    }\n  }\n\n}\n"]}