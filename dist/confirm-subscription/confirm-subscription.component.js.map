{"version":3,"file":"confirm-subscription.component.js","sourceRoot":"","sources":["../../src/app/confirm-subscription/confirm-subscription.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { ComponentBase } from '@buildmotion/core';\r\nimport { BuildMotionSecurityService, ConfirmationToken } from '..';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\n\r\n@Component({\r\n  selector: 'bm-confirm-subscription',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-envelope prefix\"></i>\r\n      <input type=\"text\" id=\"UserName\" class=\"form-control\" formControlName=\"UserName\">\r\n      <label for=\"UserName\">Your email address.</label>\r\n    </div>\r\n  \r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-person prefix\"></i>\r\n      <input type=\"text\" id=\"ConfirmationToken\" class=\"form-control\" formControlName=\"ConfirmationToken\">\r\n      <label for=\"ConfirmationToken\">Enter token from email.</label>\r\n    </div>\r\n  \r\n    <div class=\"text-xs-center\">\r\n      <button class=\"btn btn-lime\" type=\"submit\">Confirm Account</button>\r\n    </div>\r\n  </form>`\r\n})\r\nexport class ConfirmSubscriptionComponent extends ComponentBase implements OnInit {\r\n  @Output() confirm = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  email: string = '';\r\n  confirmationToken: string = '';\r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    router: Router\r\n  ) {  \r\n    super(`ConfirmSubscriptionComponent`, loggingService, router);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Running [ngOnInit] for ${this.componentName}`);\r\n    this.retrieveQueryParams();\r\n  }\r\n\r\n  retrieveQueryParams() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to retrieve the [queryParams] from ${this.componentName}.`);\r\n    try {\r\n      this.route.params\r\n        .map((params: Params) => (params['email'])).subscribe(\r\n        response => this.handleEmailParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n\r\n      this.route.params\r\n        .map((params: Params) => (params['confirmationToken'])).subscribe(\r\n        response => this.handleConfirmationTokenParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n    } catch (error) {\r\n      this.handleServiceErrors(error);\r\n    }\r\n  }\r\n\r\n  handleConfirmationTokenParam(token: string) {\r\n    if (token) {\r\n      this.confirmationToken = token;\r\n      this.buildForm(); // begin form build after the params are retrieved from the url;\r\n    }\r\n  }\r\n\r\n  handleEmailParam(emailParam: string) {\r\n    if (emailParam) {\r\n      this.email = emailParam;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to build the form for the specified target entity.\r\n   */\r\n  buildForm() {\r\n    this._form = this.formBuilder.group({\r\n      UserName: [this.email, Validators.required],\r\n      ConfirmationToken: [this.confirmationToken, Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Form: {form | json}`);\r\n    this.resetAlertNotifications();\r\n    let token = new ConfirmationToken(this._form.value.UserName, this._form.value.ConfirmationToken);\r\n    this.securityService.confirmSubscriber(token).subscribe(\r\n      response => this.handleSubmit(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubmit(response: ServiceResponse | ErrorResponse ) {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to handle the response from the ${this.securityService.serviceName} in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed subscriber confirmation.`);\r\n        this.confirm.emit(response as ServiceResponse);\r\n      } else {\r\n        this.loggingService.log(this.componentName, Severity.Error, `${this.componentName}; Status is fail.`);\r\n        this.showResponseErrors(response as ErrorResponse);\r\n      }\r\n    } else {\r\n      this.loggingService.log(this.componentName, Severity.Error, 'Unexpected service error...I guess the application pooped its pants, ouch!!');\r\n    }\r\n  }\r\n\r\n}\r\n"]}