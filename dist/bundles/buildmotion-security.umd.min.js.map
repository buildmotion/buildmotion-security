{
  "version": 3,
  "file": "buildmotion-security.umd.min.js",
  "sources": [
    "ng://@buildmotion/security/node_modules/tslib/tslib.es6.js",
    "ng://@buildmotion/security/out/src/app/models/subscriber.model.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/subscriber-action-base.action.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/confirm-subscriber.action.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/register-subscriber.action.ts",
    "ng://@buildmotion/security/out/src/app/business/subscriber-api.service.ts",
    "ng://@buildmotion/security/out/src/app/business/subscriber-business-provider.service.ts",
    "ng://@buildmotion/security/out/src/app/security.service.ts",
    "ng://@buildmotion/security/out/src/app/subscribe/subscribe.component.ts",
    "ng://@buildmotion/security/out/src/app/models/confirmation-token.model.ts",
    "ng://@buildmotion/security/out/src/app/confirm-subscription/confirm-subscription.component.ts",
    "ng://@buildmotion/security/out/src/app/security.module.ts",
    "ng://@buildmotion/security/out/src/app/models/credentials.model.ts",
    "ng://@buildmotion/security/out/src/app/models/oauth-response.model.ts",
    "ng://@buildmotion/security/out/src/app/models/subscriber-item.model.ts",
    "ng://@buildmotion/security/out/src/app/models/user-account.model.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "export class Subscriber {\r\n    \r\n    Name: string;\r\n    EmailAddress: string;\r\n    SubscriptionStart: Date = new Date();\r\n\r\n    /**\r\n     * Use to create a new subscriber for the application. This is not an account - only\r\n     * a subscription to resources from the application.\r\n     * @param subscriberName\\\r\n     * @param subscriberEmail\r\n     */\r\n    constructor(subscriberName: string, subscriberEmail: string) {\r\n        this.Name = subscriberName;\r\n        this.EmailAddress = subscriberEmail;\r\n    }\r\n}\r\n",
    "import { Action, ActionResult } from 'angular-actions';\r\nimport { ServiceMessage, ServiceContext, MessageType } from 'angular-rules-engine';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { ActionBase } from '@buildmotion/foundation';\r\nimport { SubscriberBusinessProviderService } from './../subscriber-business-provider.service';\r\n\r\nexport class SubscriberActionBase extends ActionBase {\r\n\r\n    businessProvider: SubscriberBusinessProviderService;\r\n    loggingService: LoggingService;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n     /**\r\n     * Use the [Do] method to perform the action.\r\n     */\r\n    Do(businessProvider: SubscriberBusinessProviderService) {\r\n        this.businessProvider = businessProvider;\r\n        this.serviceContext = businessProvider.serviceContext;\r\n        this.loggingService = businessProvider.loggingService;\r\n\r\n        this.execute();\r\n    }\r\n}",
    "import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Response } from '@angular/http';\r\nimport { ActionResult } from 'angular-actions';\r\nimport * as rules from 'angular-rules-engine';\r\n\r\nimport { HttpBaseService, ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { Severity } from '@buildmotion/logging';\r\nimport { SubscriberActionBase } from './subscriber-action-base.action';\r\n\r\nimport { ConfirmationToken } from '../..';\r\n\r\nexport class ConfirmSubscriberAction extends SubscriberActionBase {\r\n\r\n    // response: Observable<Response>;\r\n    response: Observable<ServiceResponse>;\r\n\r\n    constructor(private confirmationToken: ConfirmationToken) {\r\n        super();\r\n        this.actionName = 'ConfirmSubscriberAction';\r\n    }\r\n\r\n    /**\r\n     * Override this method from the base [Action] class to allow for rules to be added to the\r\n     * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n     * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n     * of the [Action] framework.\r\n     */\r\n    preValidateAction() {\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n        this.validationContext\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'UserNameIsValid',\r\n                'The user name value is not valid. Must be between 1-80 characters.',\r\n                this.confirmationToken.UserName, 1, 80, true))\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'ConfirmationTokenIsValid',\r\n                'The confirmation token value is not valid.',\r\n                this.confirmationToken.ConfirmationToken, 40, 40, true));\r\n\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n     * does not contain any rule violations.\r\n     */\r\n    performAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`)\r\n        this.response = this.businessProvider.subscriberApiService.confirmSubscriber(this.confirmationToken);\r\n    }\r\n}\r\n",
    "import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Response } from '@angular/http';\r\nimport { ActionResult } from 'angular-actions';\r\nimport * as rules from 'angular-rules-engine';\r\n\r\nimport { HttpBaseService, ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { Severity } from '@buildmotion/logging';\r\nimport { SubscriberActionBase } from './subscriber-action-base.action';\r\n\r\nimport { Subscriber } from './../../models/subscriber.model';\r\n\r\nexport class RegisterSubscriberAction extends SubscriberActionBase {\r\n\r\n    // response: Observable<Response>;\r\n    response: Observable<ServiceResponse>;\r\n \r\n    constructor(private subscriber: Subscriber) {\r\n        super();\r\n        this.actionName = 'CreateUserSubscriptionAction';\r\n    }\r\n\r\n    /**\r\n     * Override this method from the base [Action] class to allow for rules to be added to the\r\n     * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n     * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n     * of the [Action] framework.\r\n     */\r\n    preValidateAction() {\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n        this.validationContext\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'NameIsValid',\r\n                'The name value is not valid. Must be between 1-40 characters.',\r\n                this.subscriber.Name, 2, 40, true))\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'EmailIsValid',\r\n                'The email address value is not valid. Must be between 8-60 characters.',\r\n                this.subscriber.EmailAddress, 8, 60, true));\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n     * does not contain any rule violations.\r\n     */\r\n    performAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`)\r\n        this.response = this.businessProvider.subscriberApiService.registerSubscriber(this.subscriber);\r\n    }\r\n}\r\n",
    "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  Http,\r\n  RequestMethod,\r\n  Response,\r\n  Headers,\r\n  RequestOptions\r\n} from '@angular/http';\r\n  import 'rxjs/add/operator/map';\r\n  import 'rxjs/add/operator/catch';\r\n  import 'rxjs/add/operator/observeOn';\r\n  import 'rxjs/add/operator/toPromise';\r\n  // import 'rxjs/add/operator/cache';\r\n  import { Observable } from 'rxjs/Observable';\r\n  import { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\n\r\nimport { HttpBaseService } from '@buildmotion/foundation';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { SubscriberItem } from './../models/subscriber-item.model';\r\nimport { ServiceResponse } from '@buildmotion/foundation';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberApiService extends HttpBaseService {\r\n  url: string = '/api/security';\r\n  serviceName: string;\r\n\r\n  constructor(\r\n    @Inject(Http) public http: Http,\r\n    @Inject(HttpBaseService) public httpService: HttpBaseService,\r\n    // @Inject(ServiceContext) serviceContext: ServiceContext,\r\n    public loggingService: LoggingService\r\n  ) {\r\n    super(http, loggingService);\r\n    this.serviceName = 'SecurityHttpService';\r\n    // this.serviceContext = serviceContext;\r\n  }\r\n\r\n  /**\r\n   * Use to register a new subscriber. \r\n   * @param subscriber contains the subscriber's name and email address. Must be a valid email address.\r\n   */\r\n  public registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    let requestUrl = 'api/subscriber/register';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(subscriber);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = new ServiceResponse();\r\n    // response.IsSuccess = true;\r\n    // response.Message = `Fake message from ${this.serviceName}`;\r\n    // response.Data = true;\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  /**\r\n   * Use to process the confirmation token from a new subscriber. \r\n   * @param confirmationToken \r\n   */\r\n  public confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    let requestUrl = 'api/subscriber/confirmation';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(confirmationToken);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = { IsSuccess: false, Message: `Fake message from ${this.serviceName}` };\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  public retrieveSubscribers() {\r\n    const requestUrl = 'api/subscriber';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = '';\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Get,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n\r\n  public removeSubscriber(subscriber: SubscriberItem) {\r\n    const requestUrl = 'api/subscriber/remove';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = JSON.stringify(subscriber);\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n}\r\n",
    "import { Injectable, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { ServiceBase, ServiceResponse } from '@buildmotion/foundation';\r\n\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { ConfirmSubscriberAction } from './actions/confirm-subscriber.action';\r\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\r\nimport { SubscriberApiService } from './subscriber-api.service';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberBusinessProviderService extends ServiceBase {\r\n\r\n  constructor(\r\n    public loggingService: LoggingService,\r\n    @Inject(SubscriberApiService) public subscriberApiService: SubscriberApiService\r\n  ) {\r\n    super(loggingService);\r\n    this.serviceName = 'SubscriberBusinessProviderService';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Running the constructor for ${this.serviceName}`);\r\n  }\r\n\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const action = new RegisterSubscriberAction(subscriber);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    const action = new ConfirmSubscriberAction(confirmationToken);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ServiceBase, ServiceResponse } from '@buildmotion/foundation';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './models/subscriber.model';\r\n\r\nimport { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\nimport { ConfirmationToken } from '.';\r\n\r\n@Injectable()\r\nexport class BuildMotionSecurityService extends ServiceBase {\r\n\r\n  constructor(\r\n    loggingService: LoggingService,\r\n    private businessProvider: SubscriberBusinessProviderService\r\n  ) {\r\n    super(loggingService)\r\n    this.serviceName = 'SecurityService';\r\n    this.businessProvider.serviceContext = this.serviceContext;\r\n\r\n\r\n    this.businessProvider.loggingService = this.loggingService;\r\n   }\r\n\r\n   /**\r\n    * Use to register a new subscriber to the application.\r\n    * @param subscriber contains the user name and email address for the subscriber.\r\n    */\r\n   registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to create a new subscription.`);\r\n    return this.businessProvider.registerSubscriber(subscriber);\r\n  }\r\n\r\n  /**\r\n   * Use to confirm a new subscriber.\r\n   * @param confirmationToken contains the user name and a [Hash] value that is used to confirm the user. \r\n   */\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to confirm subscriber.`);\r\n    return this.businessProvider.confirmSubscriber(confirmationToken)\r\n  }\r\n}\r\n",
    "import { Component, OnInit, Output, ViewChild, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { ComponentBase } from '@buildmotion/core';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { BuildMotionSecurityService } from './../security.service';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\n\r\n@Component({\r\n  selector: 'bm-subscribe',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <!-- SUBSCRIBER NAME -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons users_circle-08\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\r\n    </div>\r\n    <!-- SUBSCRIBER EMAIL -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons ui-1_email-85\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\r\n    </div>\r\n    <!-- SUBSCRIBE BUTTON -->\r\n    <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\r\n      <i class=\"fa fa-check ml-1\"></i>\r\n    </button>\r\n  </form>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->`\r\n})\r\nexport class SubscribeComponent extends ComponentBase implements OnInit { \r\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  subscriber: Subscriber;\r\n  \r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    router: Router\r\n  ) {\r\n    super('SubscribeComponent', loggingService, router)\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(): void {\r\n    this._form = this.formBuilder.group({\r\n      subscriberName: ['', Validators.required],\r\n      emailAddress: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.securityService.serviceContext.Messages = [];\r\n    this.subscriber = new Subscriber(this._form.value.subscriberName, this._form.value.emailAddress);\r\n    this.subscribeUser(this.subscriber);\r\n  }\r\n\r\n  subscribeUser(subscriber: Subscriber) {\r\n    this.securityService.registerSubscriber(subscriber).subscribe(\r\n      response => this.handleSubscribeUser(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubscribeUser(response: ServiceResponse | ErrorResponse) {\r\n    const functionName = 'handleSubscribeUser';\r\n    this.loggingService.log(this.componentName, Severity.Information, `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed request to create subscriber. Prepare to download...`);\r\n        this.subscribe.emit(response as ServiceResponse);\r\n      } else {\r\n        this.handleServiceErrors(response as ErrorResponse, this.securityService.serviceContext);\r\n      }\r\n    } else {\r\n      // TODO: NEED TO HANDLE\r\n    }\r\n  }\r\n}\r\n",
    "\r\n/**\r\n * Use the model for account confirmation information.\r\n */\r\nexport class ConfirmationToken {\r\n\r\n    /**\r\n     * Constructor for the account confirmation token information. \r\n     */\r\n    constructor(public UserName: string, public ConfirmationToken: string) { }\r\n}\r\n",
    "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { ComponentBase } from '@buildmotion/core';\r\n// import { BuildMotionSecurityService, ConfirmationToken } from '..';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { BuildMotionSecurityService } from './../security.service';\r\nimport { ConfirmationToken } from './../models/confirmation-token.model';\r\n\r\n@Component({\r\n  selector: 'bm-confirm-subscription',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-envelope prefix\"></i>\r\n      <input type=\"text\" id=\"UserName\" class=\"form-control\" formControlName=\"UserName\">\r\n      <label for=\"UserName\">Your email address.</label>\r\n    </div>\r\n  \r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-person prefix\"></i>\r\n      <input type=\"text\" id=\"ConfirmationToken\" class=\"form-control\" formControlName=\"ConfirmationToken\">\r\n      <label for=\"ConfirmationToken\">Enter token from email.</label>\r\n    </div>\r\n  \r\n    <div class=\"text-xs-center\">\r\n      <button class=\"btn btn-lime\" type=\"submit\">Confirm Account</button>\r\n    </div>\r\n  </form>`\r\n})\r\nexport class ConfirmSubscriptionComponent extends ComponentBase implements OnInit {\r\n  @Output() confirm = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  email: string = '';\r\n  confirmationToken: string = '';\r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    router: Router\r\n  ) {  \r\n    super(`ConfirmSubscriptionComponent`, loggingService, router);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Running [ngOnInit] for ${this.componentName}`);\r\n    this.retrieveQueryParams();\r\n  }\r\n\r\n  retrieveQueryParams() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to retrieve the [queryParams] from ${this.componentName}.`);\r\n    try {\r\n      this.route.params\r\n        .map((params: Params) => (params['email'])).subscribe(\r\n        response => this.handleEmailParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n\r\n      this.route.params\r\n        .map((params: Params) => (params['confirmationToken'])).subscribe(\r\n        response => this.handleConfirmationTokenParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n    } catch (error) {\r\n      this.handleServiceErrors(error);\r\n    }\r\n  }\r\n\r\n  handleConfirmationTokenParam(token: string) {\r\n    if (token) {\r\n      this.confirmationToken = token;\r\n      this.buildForm(); // begin form build after the params are retrieved from the url;\r\n    }\r\n  }\r\n\r\n  handleEmailParam(emailParam: string) {\r\n    if (emailParam) {\r\n      this.email = emailParam;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to build the form for the specified target entity.\r\n   */\r\n  buildForm() {\r\n    this._form = this.formBuilder.group({\r\n      UserName: [this.email, Validators.required],\r\n      ConfirmationToken: [this.confirmationToken, Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Form: {form | json}`);\r\n    this.resetAlertNotifications();\r\n    let token = new ConfirmationToken(this._form.value.UserName, this._form.value.ConfirmationToken);\r\n    this.securityService.confirmSubscriber(token).subscribe(\r\n      response => this.handleSubmit(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubmit(response: ServiceResponse | ErrorResponse ) {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to handle the response from the ${this.securityService.serviceName} in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed subscriber confirmation.`);\r\n        this.confirm.emit(response as ServiceResponse);\r\n      } else {\r\n        this.loggingService.log(this.componentName, Severity.Error, `${this.componentName}; Status is fail.`);\r\n        this.showResponseErrors(response as ErrorResponse);\r\n      }\r\n    } else {\r\n      this.loggingService.log(this.componentName, Severity.Error, 'Unexpected service error...I guess the application pooped its pants, ouch!!');\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { BuildMotionLoggingModule } from '@buildmotion/logging';\r\nimport { BuildMotionCoreModule } from '@buildmotion/core';\r\nimport { BuildMotionFoundationModule } from '@buildmotion/foundation';\r\nimport { SubscribeComponent } from './subscribe/subscribe.component';\r\n\r\n// INTERNAL INJECTABLE SERVICES\r\nimport { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\nimport { SubscriberApiService } from './business/subscriber-api.service';\r\nimport { ConfirmSubscriptionComponent } from './confirm-subscription/confirm-subscription.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BuildMotionCoreModule,\r\n    BuildMotionFoundationModule,\r\n    BuildMotionLoggingModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [SubscribeComponent, ConfirmSubscriptionComponent],\r\n  exports: [\r\n    ConfirmSubscriptionComponent,\r\n    SubscribeComponent\r\n  ],\r\n  providers: [\r\n    SubscriberApiService, //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n    SubscriberBusinessProviderService //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n  ]\r\n})\r\nexport class BuildMotionSecurityModule { }\r\n",
    "export class Credentials {\r\n    UserName: string;\r\n    Password: string;\r\n\r\n    /**\r\n     * Use to contain credentials for the login process.\r\n     * @param username: The user name for the specified application user.\r\n     * @param password: The password for the specified user.\r\n     */\r\n    constructor(username: string, password: string) {\r\n        this.UserName = username;\r\n        this.Password = password;\r\n    }\r\n\r\n    toString(){\r\n        return `UserName: ${this.UserName}; Password: ************`;\r\n    }\r\n}\r\n",
    "\r\n/**\r\n * Contains the response data from the OWIN OAuth provider. \r\n */\r\nexport class OAuthResponse {\r\n    access_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n\r\n    /**\r\n     * Use to return a string representing the OAuthResponse.\r\n     */\r\n    toString() {\r\n        return `access_token: ${this.access_token}; expires_in: ${this.expires_in}; token_type: ${this.token_type}`;\r\n    }\r\n}",
    "export class SubscriberItem {\r\n    Id: string;\r\n    EmailAddress: string;\r\n    IsUnsubscribed: boolean;\r\n    IsVerified: boolean;\r\n    Name: string;\r\n    SubscriptionStart: Date = new Date();\r\n    VerifiedDate?: Date;\r\n\r\n    constructor(){\r\n    }\r\n}\r\n",
    "\r\n/**\r\n * Use to transport data to create a new account.\r\n */\r\nexport class UserAccount {\r\n    FirstName: string;\r\n    LastName: string;\r\n    Password: string;\r\n    PasswordCopy: string;\r\n    UserName: string;\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "Subscriber",
    "subscriberName",
    "subscriberEmail",
    "SubscriptionStart",
    "Date",
    "Name",
    "EmailAddress",
    "SubscriberActionBase",
    "_super",
    "call",
    "tslib_1.__extends",
    "Do",
    "businessProvider",
    "serviceContext",
    "loggingService",
    "execute",
    "ActionBase",
    "ConfirmSubscriberAction",
    "confirmationToken",
    "_this",
    "actionName",
    "preValidateAction",
    "console",
    "log",
    "validationContext",
    "addRule",
    "rules.StringIsNotNullEmptyRange",
    "UserName",
    "ConfirmationToken",
    "performAction",
    "Severity",
    "Information",
    "response",
    "subscriberApiService",
    "confirmSubscriber",
    "RegisterSubscriberAction",
    "subscriber",
    "registerSubscriber",
    "SubscriberApiService",
    "http",
    "httpService",
    "url",
    "serviceName",
    "requestUrl",
    "body",
    "JSON",
    "stringify",
    "options",
    "createRequestOptions",
    "RequestMethod",
    "Post",
    "createHeader",
    "executeRequest",
    "retrieveSubscribers",
    "Get",
    "removeSubscriber",
    "HttpBaseService",
    "type",
    "Injectable",
    "Http",
    "decorators",
    "Inject",
    "args",
    "LoggingService",
    "SubscriberBusinessProviderService",
    "action",
    "ServiceBase",
    "BuildMotionSecurityService",
    "SubscribeComponent",
    "securityService",
    "formBuilder",
    "router",
    "subscribe",
    "EventEmitter",
    "ngOnInit",
    "buildForm",
    "_form",
    "group",
    "Validators",
    "required",
    "emailAddress",
    "submitForm",
    "Messages",
    "value",
    "subscribeUser",
    "handleSubscribeUser",
    "error",
    "handleServiceErrors",
    "finishRequest",
    "componentName",
    "IsSuccess",
    "emit",
    "ComponentBase",
    "Component",
    "selector",
    "template",
    "FormBuilder",
    "Router",
    "Output",
    "ConfirmSubscriptionComponent",
    "route",
    "confirm",
    "email",
    "retrieveQueryParams",
    "params",
    "map",
    "handleEmailParam",
    "handleConfirmationTokenParam",
    "token",
    "emailParam",
    "resetAlertNotifications",
    "handleSubmit",
    "Error",
    "showResponseErrors",
    "ActivatedRoute",
    "BuildMotionSecurityModule",
    "NgModule",
    "imports",
    "BuildMotionCoreModule",
    "BuildMotionFoundationModule",
    "BuildMotionLoggingModule",
    "CommonModule",
    "FormsModule",
    "ReactiveFormsModule",
    "HttpModule",
    "RouterModule",
    "declarations",
    "exports",
    "providers",
    "Credentials",
    "username",
    "password",
    "Password",
    "toString",
    "OAuthResponse",
    "access_token",
    "expires_in",
    "token_type",
    "SubscriberItem",
    "UserAccount"
  ],
  "mappings": "qyCAgBA,IAAIA,EAAgBC,OAAOC,iBACpBC,wBAA2BC,OAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,KAEzE,SAAgBE,EAAUJ,EAAGC,GAEzB,SAASI,IAAOC,KAAKC,YAAcP,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEQ,UAAkB,OAANP,EAAaL,OAAOa,OAAOR,IAAMI,EAAGG,UAAYP,EAAEO,UAAW,IAAIH,GCvBnF,IAAAK,EAAA,WAgBA,OAJI,SAAYC,EAAwBC,GARxCN,KAAAO,kBAA8B,IAAIC,KAS1BR,KAAKS,KAAOJ,EACZL,KAAKU,aAAeJ,GAd5B,GCIAK,EAAA,SAAAC,GAQI,SAAJD,IACA,OAAQC,EAARC,KAAAb,OAAAA,KAaA,OAnB0Cc,EAA1CA,EAAAA,GAYIH,EAAJT,UAAAa,GAAI,SAAGC,GACChB,KAAKgB,iBAAmBA,EACxBhB,KAAKiB,eAAiBD,EAAiBC,eACvCjB,KAAKkB,eAAiBF,EAAiBE,eAEvClB,KAAKmB,WAEbR,EAtBA,CAG0CS,EAAAA,YCN1CC,EAAA,SAAAT,GAkBI,SAAJS,EAAwBC,GAApB,IAAJC,EACQX,EADRC,KAAAb,OAAAA,YAAwBuB,EAAxBD,kBAAwBA,EAEhBC,EAAKC,WAAa,4BAgC1B,OAvC6CV,EAA7CA,EAAAA,GAgBIO,EAAJnB,UAAAuB,kBAAI,WACIC,QAAQC,IAAI,2CAA2C3B,KAAKwB,WAApE,YACQxB,KAAK4B,kBACAC,QAAQ,IAAIC,EAAAA,0BACT,kBACA,qEACA9B,KAAKsB,kBAAkBS,SAAU,EAAG,IAAI,IAC3CF,QAAQ,IAAIC,EAAAA,0BACT,2BACA,6CACA9B,KAAKsB,kBAAkBU,kBAAmB,GAAI,IAAI,IAE1DN,QAAQC,IAAI,2CAA2C3B,KAAKwB,WAApE,aAOIH,EAAJnB,UAAA+B,cAAI,WACIjC,KAAKkB,eAAeS,IAAI3B,KAAKwB,WAAYU,EAAAA,SAASC,YAAa,uCAAuCnC,KAAKwB,WAAnH,KACQxB,KAAKoC,SAAWpC,KAAKgB,iBAAiBqB,qBAAqBC,kBAAkBtC,KAAKsB,oBAE1FD,EApDA,CAa6CV,GCb7C4B,EAAA,SAAA3B,GAkBI,SAAJ2B,EAAwBC,GAApB,IAAJjB,EACQX,EADRC,KAAAb,OAAAA,YAAwBuB,EAAxBiB,WAAwBA,EAEhBjB,EAAKC,WAAa,iCA8B1B,OArC8CV,EAA9CA,EAAAA,GAgBIyB,EAAJrC,UAAAuB,kBAAI,WACIC,QAAQC,IAAI,2CAA2C3B,KAAKwB,WAApE,YACQxB,KAAK4B,kBACAC,QAAQ,IAAIC,EAAAA,0BACT,cACA,gEACA9B,KAAKwC,WAAW/B,KAAM,EAAG,IAAI,IAChCoB,QAAQ,IAAIC,EAAAA,0BACT,eACA,yEACA9B,KAAKwC,WAAW9B,aAAc,EAAG,IAAI,KAOjD6B,EAAJrC,UAAA+B,cAAI,WACIjC,KAAKkB,eAAeS,IAAI3B,KAAKwB,WAAYU,EAAAA,SAASC,YAAa,uCAAuCnC,KAAKwB,WAAnH,KACQxB,KAAKoC,SAAWpC,KAAKgB,iBAAiBqB,qBAAqBI,mBAAmBzC,KAAKwC,aAE3FD,EAlDA,CAa8C5B,GCd9C+B,EAAA,SAAA9B,GA8BE,SAAF8B,EACyBC,EACWC,EAEzB1B,GAJT,IAAFK,EAMIX,EANJC,KAAAb,KAMU2C,EAAMzB,IANhBlB,YACyBuB,EAAzBoB,KAAyBA,EACWpB,EAApCqB,YAAoCA,EAEzBrB,EAAXL,eAAWA,EAPXK,EAAAsB,IAAgB,gBAUZtB,EAAKuB,YAAc,+BAXmBhC,EAA1CA,EAAAA,GAmBS4B,EAATxC,UAAAuC,mBAAS,SAAmBD,GACxB,IAAIO,EAAa,0BACjB/C,KAAKkB,eAAeS,IAAI3B,KAAK8C,YAAaZ,EAAAA,SAASC,YAAgBnC,KAAK8C,YAA5E,uBAA8GC,GAE1G,IAAIC,EAAOC,KAAKC,UAAUV,GACtBW,EAAUnD,KAAK4C,YAAYQ,qBAC7BC,EAAAA,cAAcC,KACdtD,KAAK4C,YAAYW,cAAa,GAC9BR,EACAC,GACF,OAAOhD,KAAK4C,YAAYY,eAAeL,IAgBlCT,EAATxC,UAAAoC,kBAAS,SAAkBhB,GACvB,IAAIyB,EAAa,8BACjB/C,KAAKkB,eAAeS,IAAI3B,KAAK8C,YAAaZ,EAAAA,SAASC,YAAgBnC,KAAK8C,YAA5E,uBAA8GC,GAE1G,IAAIC,EAAOC,KAAKC,UAAU5B,GACtB6B,EAAUnD,KAAK4C,YAAYQ,qBAC7BC,EAAAA,cAAcC,KACdtD,KAAK4C,YAAYW,cAAa,GAC9BR,EACAC,GACF,OAAOhD,KAAK4C,YAAYY,eAAeL,IASlCT,EAATxC,UAAAuD,oBAAS,WACL,IAAMV,EAAa,iBACnB/C,KAAKkB,eAAeS,IAAI3B,KAAK8C,YAAaZ,EAAAA,SAASC,YAAgBnC,KAAK8C,YAA5E,uBAA8GC,GAE1G,IACMI,EAAUnD,KAAK4C,YAAYQ,qBAC/BC,EAAAA,cAAcK,IACd1D,KAAK4C,YAAYW,cAAa,GAC9BR,EAJW,IAMb,OAAO/C,KAAK4C,YAAYY,eAAeL,IAGlCT,EAATxC,UAAAyD,iBAAS,SAAiBnB,GACtB,IAAMO,EAAa,wBACnB/C,KAAKkB,eAAeS,IAAI3B,KAAK8C,YAAaZ,EAAAA,SAASC,YAAgBnC,KAAK8C,YAA5E,uBAA8GC,GAE1G,IAAMC,EAAOC,KAAKC,UAAUV,GACtBW,EAAUnD,KAAK4C,YAAYQ,qBAC/BC,EAAAA,cAAcC,KACdtD,KAAK4C,YAAYW,cAAa,GAC9BR,EACAC,GACF,OAAOhD,KAAK4C,YAAYY,eAAeL,MAjH3C,CA0B0CS,EAAAA,gCAD1CC,KAACC,EAAAA,iDAvBDD,KAAEE,EAAAA,KAAFC,aAAAH,KA6BKI,EAAAA,OA7BLC,MA6BYH,EAAAA,UAbZF,KAASD,EAAAA,gBAATI,aAAAH,KAcKI,EAAAA,OAdLC,MAcYN,EAAAA,qBAhBZC,KAASM,EAAAA,kBChBT,IAAAC,EAAA,SAAAxD,GAeE,SAAFwD,EACWlD,EAC8BmB,GAFvC,IAAFd,EAIIX,EAJJC,KAAAb,KAIUkB,IAJVlB,YACWuB,EAAXL,eAAWA,EAC8BK,EAAzCc,qBAAyCA,EAGrCd,EAAKuB,YAAc,oCACnBvB,EAAKL,eAAeS,IAAIJ,EAAKuB,YAAaZ,EAAAA,SAASC,YAAa,+BAA+BZ,EAAKuB,sBARjDhC,EAAvDA,EAAAA,GAWEsD,EAAFlE,UAAAuC,mBAAE,SAAmBD,GACjB,IAAM6B,EAAS,IAAI9B,EAAyBC,GAE5C,OADA6B,EAAOtD,GAAGf,MACHqE,EAAOjC,UAGhBgC,EAAFlE,UAAAoC,kBAAE,SAAkBhB,GAChB,IAAM+C,EAAS,IAAIhD,EAAwBC,GAE3C,OADA+C,EAAOtD,GAAGf,MACHqE,EAAOjC,YAjClB,CAauDkC,EAAAA,4BADvDT,KAACC,EAAAA,iDATDD,KAASM,EAAAA,iBAMTN,KAASnB,EAATsB,aAAAH,KAQKI,EAAAA,OARLC,MAQYxB,QCjBZ,IAAA6B,EAAA,SAAA3D,GAYE,SAAF2D,EACIrD,EACQF,GAFV,IAAFO,EAIIX,EAJJC,KAAAb,KAIUkB,IAJVlB,YAEYuB,EAAZP,iBAAYA,EAGRO,EAAKuB,YAAc,kBACnBvB,EAAKP,iBAAiBC,eAAiBM,EAAKN,eAG5CM,EAAKP,iBAAiBE,eAAiBK,EAAKL,wBAXAJ,EAAhDA,EAAAA,GAkBGyD,EAAHrE,UAAAuC,mBAAG,SAAmBD,GAElB,OADAxC,KAAKkB,eAAeS,IAAI3B,KAAK8C,YAAaZ,EAAAA,SAASC,YAAgBnC,KAAK8C,YAA5E,4CACW9C,KAAKgB,iBAAiByB,mBAAmBD,IAOlD+B,EAAFrE,UAAAoC,kBAAE,SAAkBhB,GAEhB,OADAtB,KAAKkB,eAAeS,IAAI3B,KAAK8C,YAAaZ,EAAAA,SAASC,YAAa,oCACzDnC,KAAKgB,iBAAiBsB,kBAAkBhB,MAvCnD,CAUgDgD,EAAAA,4BADhDT,KAACC,EAAAA,iDANDD,KAASM,EAAAA,iBAGTN,KAASO,KCNT,IAAAI,EAAA,SAAA5D,GA8CE,SAAF4D,EACYC,EACRvD,EACOwD,EACPC,GAJF,IAAFpD,EAMIX,EANJC,KAAAb,KAMU,qBAAsBkB,EAAgByD,IANhD3E,YACYuB,EAAZkD,gBAAYA,EAEDlD,EAAXmD,YAAWA,EARXnD,EAAAqD,UAAwB,IAAIC,EAAAA,sBADY/D,EAAxCA,EAAAA,GAeE0D,EAAFtE,UAAA4E,SAAE,WACE9E,KAAK+E,aAGPP,EAAFtE,UAAA6E,UAAE,WACE/E,KAAKgF,MAAQhF,KAAK0E,YAAYO,OAC5B5E,gBAAiB,GAAI6E,EAAAA,WAAWC,UAChCC,cAAe,GAAIF,EAAAA,WAAWC,aAIlCX,EAAFtE,UAAAmF,WAAE,WACErF,KAAKyE,gBAAgBxD,eAAeqE,YACpCtF,KAAKwC,WAAa,IAAIpC,EAAWJ,KAAKgF,MAAMO,MAAMlF,eAAgBL,KAAKgF,MAAMO,MAAMH,cACnFpF,KAAKwF,cAAcxF,KAAKwC,aAG1BgC,EAAFtE,UAAAsF,cAAE,SAAchD,GAAd,IAAFjB,EAAAvB,KACIA,KAAKyE,gBAAgBhC,mBAAmBD,GAAYoC,UAClD,SAAAxC,GAAY,OAAAb,EAAKkE,oBAAoBrD,IACrC,SAAAsD,GAAS,OAAAnE,EAAKoE,oBAAoBD,EAAOnE,EAAKkD,gBAAgBxD,iBAC9D,WAAM,OAAAM,EAAKqE,cAAcrE,EAAKsE,kBAIlCrB,EAAFtE,UAAAuF,oBAAE,SAAoBrD,GAElBpC,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASC,YAAa,6FAAyFnC,KAAK6F,cAApK,KACQzD,IACEA,EAAS0D,WACX9F,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASC,YAAa,+EAClEnC,KAAK4E,UAAUmB,KAAI,IAEnB/F,KAAK2F,oBAAmB,EAA4B3F,KAAKyE,gBAAgBxD,oBAxFjF,CAwCwC+E,EAAAA,8BA1BxCnC,KAACoC,EAAAA,UAAD/B,OACEgC,SAAU,eACVC,SAAU,okCALZtC,KAASU,IAFTV,KAASM,EAAAA,iBALTN,KAAEuC,EAAAA,cAHFvC,KAASwC,EAAAA,4BAwCTzB,YAAAf,KAAGyC,EAAAA,UCrCH,IAAAtE,EAAA,WAMA,OADI,SAAmBD,EAAyBC,GAAzBhC,KAAvB+B,SAAuBA,EAAyB/B,KAAhDgC,kBAAgDA,GALhD,GCDAuE,EAAA,SAAA3F,GAkCE,SAAF2F,EACY9B,EACRvD,EACOwD,EACC8B,EACR7B,GALF,IAAFpD,EAOIX,EAPJC,KAAAb,KAOU,+BAAgCkB,EAAgByD,IAP1D3E,YACYuB,EAAZkD,gBAAYA,EAEDlD,EAAXmD,YAAWA,EACCnD,EAAZiF,MAAYA,EATZjF,EAAAkF,QAAsB,IAAI5B,EAAAA,aAE1BtD,EAAAmF,MAAkB,GAClBnF,EAAAD,kBAA8B,YAJoBR,EAAlDA,EAAAA,GAgBEyF,EAAFrG,UAAA4E,SAAE,WACE9E,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASC,YAAa,0BAA0BnC,KAAK6F,eACjG7F,KAAK2G,uBAGPJ,EAAFrG,UAAAyG,oBAAE,WAAA,IAAFpF,EAAAvB,KACIA,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASC,YAAa,gDAAgDnC,KAAK6F,cAA3H,KACI,IACE7F,KAAKwG,MAAMI,OACRC,IAAI,SAACD,GAAd,OAAkCA,EAAe,QAAGhC,UAC5C,SAAAxC,GAAY,OAAAb,EAAKuF,iBAAiB1E,IAClC,SAAAsD,GAAS,OAAAnE,EAAKoE,oBAAoBD,IAClC,WAAM,OAAAnE,EAAKqE,cAAc,yBAG3B5F,KAAKwG,MAAMI,OACRC,IAAI,SAACD,GAAd,OAAkCA,EAA2B,oBAAGhC,UACxD,SAAAxC,GAAY,OAAAb,EAAKwF,6BAA6B3E,IAC9C,SAAAsD,GAAS,OAAAnE,EAAKoE,oBAAoBD,IAClC,WAAM,OAAAnE,EAAKqE,cAAc,yBAE3B,MAAOF,GACP1F,KAAK2F,oBAAoBD,KAI7Ba,EAAFrG,UAAA6G,6BAAE,SAA6BC,GACvBA,IACFhH,KAAKsB,kBAAoB0F,EACzBhH,KAAK+E,cAITwB,EAAFrG,UAAA4G,iBAAE,SAAiBG,GACXA,IACFjH,KAAK0G,MAAQO,IAOjBV,EAAFrG,UAAA6E,UAAE,WACE/E,KAAKgF,MAAQhF,KAAK0E,YAAYO,OAC5BlD,UAAW/B,KAAK0G,MAAOxB,EAAAA,WAAWC,UAClCnD,mBAAoBhC,KAAKsB,kBAAmB4D,EAAAA,WAAWC,aAI3DoB,EAAFrG,UAAAmF,WAAE,WAAA,IAAF9D,EAAAvB,KACIA,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASC,YAAa,uBAClEnC,KAAKkH,0BACL,IAAIF,EAAQ,IAAIhF,EAAkBhC,KAAKgF,MAAMO,MAAMxD,SAAU/B,KAAKgF,MAAMO,MAAMvD,mBAC9EhC,KAAKyE,gBAAgBnC,kBAAkB0E,GAAOpC,UAC5C,SAAAxC,GAAY,OAAAb,EAAK4F,aAAa/E,IAC9B,SAAAsD,GAAS,OAAAnE,EAAKoE,oBAAoBD,EAAOnE,EAAKkD,gBAAgBxD,iBAC9D,WAAM,OAAAM,EAAKqE,cAAcrE,EAAKsE,kBAIlCU,EAAFrG,UAAAiH,aAAE,SAAa/E,GACXpC,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASC,YAAa,6CAA6CnC,KAAKyE,gBAAgB3B,YAAxI,WAA8J9C,KAAK6F,cAAnK,KACQzD,EACEA,EAAS0D,WACX9F,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASC,YAAa,mDAClEnC,KAAKyG,QAAQV,KAAI,KAEjB/F,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASkF,MAAUpH,KAAK6F,cAA5E,qBACQ7F,KAAKqH,mBAAkB,IAGzBrH,KAAKkB,eAAeS,IAAI3B,KAAK6F,cAAe3D,EAAAA,SAASkF,MAAO,kFAnHlE,CA4BkDpB,EAAAA,8BArBlDnC,KAACoC,EAAAA,UAAD/B,OACEgC,SAAU,0BACVC,SAAU,00BALZtC,KAASU,IAJTV,KAASM,EAAAA,iBACTN,KAASuC,EAAAA,cACTvC,KAASyD,EAAAA,iBAATzD,KAAiCwC,EAAAA,4BA2BjCI,UAAA5C,KAAGyC,EAAAA,UCpBH,IAAAiB,EAAA,kBAAA,aAAA,kBAIA1D,KAAC2D,EAAAA,SAADtD,OACEuD,SACEC,EAAAA,sBACAC,EAAAA,4BACAC,EAAAA,yBACAC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,WACAC,EAAAA,cAEFC,cAAe1D,EAAoB+B,GACnC4B,SACE5B,EACA/B,GAEF4D,WACE1F,EACA0B,6CClCJ,IAAAiE,EAAA,WASI,SAAJA,EAAgBC,EAAkBC,GAC1BvI,KAAK+B,SAAWuG,EAChBtI,KAAKwI,SAAWD,EAMxB,OAHIF,EAAJnI,UAAAuI,SAAI,WACI,MAAO,aAAazI,KAAK+B,SAAjC,4BAEAsG,EAjBA,GCIAK,EAAA,WAAA,SAAAA,KAWA,OAHIA,EAAJxI,UAAAuI,SAAI,WACI,MAAO,iBAAiBzI,KAAK2I,aAArC,iBAAkE3I,KAAK4I,WAAvE,iBAAkG5I,KAAK6I,YAEvGH,EAXA,GCJAI,EAAA,WAWA,OAFI,WAHJ9I,KAAAO,kBAA8B,IAAIC,MANlC,GCIAuI,EAAA,WAMA,OANA,aAAA"
}
