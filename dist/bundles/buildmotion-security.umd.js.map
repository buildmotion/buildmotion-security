{
  "version": 3,
  "file": "buildmotion-security.umd.js",
  "sources": [
    "ng://@buildmotion/security/out/src/app/models/user-account.model.ts",
    "ng://@buildmotion/security/out/src/app/models/subscriber-item.model.ts",
    "ng://@buildmotion/security/out/src/app/models/oauth-response.model.ts",
    "ng://@buildmotion/security/out/src/app/models/credentials.model.ts",
    "ng://@buildmotion/security/out/src/app/security.module.ts",
    "ng://@buildmotion/security/out/src/app/confirm-subscription/confirm-subscription.component.ts",
    "ng://@buildmotion/security/out/src/app/models/confirmation-token.model.ts",
    "ng://@buildmotion/security/out/src/app/subscribe/subscribe.component.ts",
    "ng://@buildmotion/security/out/src/app/security.service.ts",
    "ng://@buildmotion/security/out/src/app/business/subscriber-business-provider.service.ts",
    "ng://@buildmotion/security/out/src/app/business/subscriber-api.service.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/register-subscriber.action.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/confirm-subscriber.action.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/subscriber-action-base.action.ts",
    "ng://@buildmotion/security/out/src/app/models/subscriber.model.ts",
    "ng://@buildmotion/security/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "\r\n/**\r\n * Use to transport data to create a new account.\r\n */\r\nexport class UserAccount {\r\n    FirstName: string;\r\n    LastName: string;\r\n    Password: string;\r\n    PasswordCopy: string;\r\n    UserName: string;\r\n}\r\n",
    "export class SubscriberItem {\r\n    Id: string;\r\n    EmailAddress: string;\r\n    IsUnsubscribed: boolean;\r\n    IsVerified: boolean;\r\n    Name: string;\r\n    SubscriptionStart: Date = new Date();\r\n    VerifiedDate?: Date;\r\n\r\n    constructor(){\r\n    }\r\n}\r\n",
    "\r\n/**\r\n * Contains the response data from the OWIN OAuth provider. \r\n */\r\nexport class OAuthResponse {\r\n    access_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n\r\n    /**\r\n     * Use to return a string representing the OAuthResponse.\r\n     */\r\n    toString() {\r\n        return `access_token: ${this.access_token}; expires_in: ${this.expires_in}; token_type: ${this.token_type}`;\r\n    }\r\n}",
    "export class Credentials {\r\n    UserName: string;\r\n    Password: string;\r\n\r\n    /**\r\n     * Use to contain credentials for the login process.\r\n     * @param username: The user name for the specified application user.\r\n     * @param password: The password for the specified user.\r\n     */\r\n    constructor(username: string, password: string) {\r\n        this.UserName = username;\r\n        this.Password = password;\r\n    }\r\n\r\n    toString(){\r\n        return `UserName: ${this.UserName}; Password: ************`;\r\n    }\r\n}\r\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { BuildMotionLoggingModule } from '@buildmotion/logging';\r\nimport { BuildMotionCoreModule } from '@buildmotion/core';\r\nimport { BuildMotionFoundationModule } from '@buildmotion/foundation';\r\nimport { SubscribeComponent } from './subscribe/subscribe.component';\r\n\r\n// INTERNAL INJECTABLE SERVICES\r\nimport { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\nimport { SubscriberApiService } from './business/subscriber-api.service';\r\nimport { ConfirmSubscriptionComponent } from './confirm-subscription/confirm-subscription.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BuildMotionCoreModule,\r\n    BuildMotionFoundationModule,\r\n    BuildMotionLoggingModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [SubscribeComponent, ConfirmSubscriptionComponent],\r\n  exports: [\r\n    ConfirmSubscriptionComponent,\r\n    SubscribeComponent\r\n  ],\r\n  providers: [\r\n    SubscriberApiService, //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n    SubscriberBusinessProviderService //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n  ]\r\n})\r\nexport class BuildMotionSecurityModule { }\r\n",
    "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { ComponentBase } from '@buildmotion/core';\r\n// import { BuildMotionSecurityService, ConfirmationToken } from '..';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { BuildMotionSecurityService } from './../security.service';\r\nimport { ConfirmationToken } from './../models/confirmation-token.model';\r\n\r\n@Component({\r\n  selector: 'bm-confirm-subscription',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-envelope prefix\"></i>\r\n      <input type=\"text\" id=\"UserName\" class=\"form-control\" formControlName=\"UserName\">\r\n      <label for=\"UserName\">Your email address.</label>\r\n    </div>\r\n  \r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-person prefix\"></i>\r\n      <input type=\"text\" id=\"ConfirmationToken\" class=\"form-control\" formControlName=\"ConfirmationToken\">\r\n      <label for=\"ConfirmationToken\">Enter token from email.</label>\r\n    </div>\r\n  \r\n    <div class=\"text-xs-center\">\r\n      <button class=\"btn btn-lime\" type=\"submit\">Confirm Account</button>\r\n    </div>\r\n  </form>`\r\n})\r\nexport class ConfirmSubscriptionComponent extends ComponentBase implements OnInit {\r\n  @Output() confirm = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  email: string = '';\r\n  confirmationToken: string = '';\r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    router: Router\r\n  ) {  \r\n    super(`ConfirmSubscriptionComponent`, loggingService, router);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Running [ngOnInit] for ${this.componentName}`);\r\n    this.retrieveQueryParams();\r\n  }\r\n\r\n  retrieveQueryParams() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to retrieve the [queryParams] from ${this.componentName}.`);\r\n    try {\r\n      this.route.params\r\n        .map((params: Params) => (params['email'])).subscribe(\r\n        response => this.handleEmailParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n\r\n      this.route.params\r\n        .map((params: Params) => (params['confirmationToken'])).subscribe(\r\n        response => this.handleConfirmationTokenParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n    } catch (error) {\r\n      this.handleServiceErrors(error);\r\n    }\r\n  }\r\n\r\n  handleConfirmationTokenParam(token: string) {\r\n    if (token) {\r\n      this.confirmationToken = token;\r\n      this.buildForm(); // begin form build after the params are retrieved from the url;\r\n    }\r\n  }\r\n\r\n  handleEmailParam(emailParam: string) {\r\n    if (emailParam) {\r\n      this.email = emailParam;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to build the form for the specified target entity.\r\n   */\r\n  buildForm() {\r\n    this._form = this.formBuilder.group({\r\n      UserName: [this.email, Validators.required],\r\n      ConfirmationToken: [this.confirmationToken, Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Form: {form | json}`);\r\n    this.resetAlertNotifications();\r\n    let token = new ConfirmationToken(this._form.value.UserName, this._form.value.ConfirmationToken);\r\n    this.securityService.confirmSubscriber(token).subscribe(\r\n      response => this.handleSubmit(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubmit(response: ServiceResponse | ErrorResponse ) {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to handle the response from the ${this.securityService.serviceName} in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed subscriber confirmation.`);\r\n        this.confirm.emit(response as ServiceResponse);\r\n      } else {\r\n        this.loggingService.log(this.componentName, Severity.Error, `${this.componentName}; Status is fail.`);\r\n        this.showResponseErrors(response as ErrorResponse);\r\n      }\r\n    } else {\r\n      this.loggingService.log(this.componentName, Severity.Error, 'Unexpected service error...I guess the application pooped its pants, ouch!!');\r\n    }\r\n  }\r\n\r\n}\r\n",
    "\r\n/**\r\n * Use the model for account confirmation information.\r\n */\r\nexport class ConfirmationToken {\r\n\r\n    /**\r\n     * Constructor for the account confirmation token information. \r\n     */\r\n    constructor(public UserName: string, public ConfirmationToken: string) { }\r\n}\r\n",
    "import { Component, OnInit, Output, ViewChild, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { ComponentBase } from '@buildmotion/core';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { BuildMotionSecurityService } from './../security.service';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\n\r\n@Component({\r\n  selector: 'bm-subscribe',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <!-- SUBSCRIBER NAME -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons users_circle-08\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\r\n    </div>\r\n    <!-- SUBSCRIBER EMAIL -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons ui-1_email-85\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\r\n    </div>\r\n    <!-- SUBSCRIBE BUTTON -->\r\n    <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\r\n      <i class=\"fa fa-check ml-1\"></i>\r\n    </button>\r\n  </form>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->`\r\n})\r\nexport class SubscribeComponent extends ComponentBase implements OnInit { \r\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  subscriber: Subscriber;\r\n  \r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    router: Router\r\n  ) {\r\n    super('SubscribeComponent', loggingService, router)\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(): void {\r\n    this._form = this.formBuilder.group({\r\n      subscriberName: ['', Validators.required],\r\n      emailAddress: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.securityService.serviceContext.Messages = [];\r\n    this.subscriber = new Subscriber(this._form.value.subscriberName, this._form.value.emailAddress);\r\n    this.subscribeUser(this.subscriber);\r\n  }\r\n\r\n  subscribeUser(subscriber: Subscriber) {\r\n    this.securityService.registerSubscriber(subscriber).subscribe(\r\n      response => this.handleSubscribeUser(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubscribeUser(response: ServiceResponse | ErrorResponse) {\r\n    const functionName = 'handleSubscribeUser';\r\n    this.loggingService.log(this.componentName, Severity.Information, `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed request to create subscriber. Prepare to download...`);\r\n        this.subscribe.emit(response as ServiceResponse);\r\n      } else {\r\n        this.handleServiceErrors(response as ErrorResponse, this.securityService.serviceContext);\r\n      }\r\n    } else {\r\n      // TODO: NEED TO HANDLE\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ServiceBase, ServiceResponse } from '@buildmotion/foundation';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './models/subscriber.model';\r\n\r\nimport { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\nimport { ConfirmationToken } from '.';\r\n\r\n@Injectable()\r\nexport class BuildMotionSecurityService extends ServiceBase {\r\n\r\n  constructor(\r\n    loggingService: LoggingService,\r\n    private businessProvider: SubscriberBusinessProviderService\r\n  ) {\r\n    super(loggingService)\r\n    this.serviceName = 'SecurityService';\r\n    this.businessProvider.serviceContext = this.serviceContext;\r\n\r\n\r\n    this.businessProvider.loggingService = this.loggingService;\r\n   }\r\n\r\n   /**\r\n    * Use to register a new subscriber to the application.\r\n    * @param subscriber contains the user name and email address for the subscriber.\r\n    */\r\n   registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to create a new subscription.`);\r\n    return this.businessProvider.registerSubscriber(subscriber);\r\n  }\r\n\r\n  /**\r\n   * Use to confirm a new subscriber.\r\n   * @param confirmationToken contains the user name and a [Hash] value that is used to confirm the user. \r\n   */\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to confirm subscriber.`);\r\n    return this.businessProvider.confirmSubscriber(confirmationToken)\r\n  }\r\n}\r\n",
    "import { Injectable, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { ServiceBase, ServiceResponse } from '@buildmotion/foundation';\r\n\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { ConfirmSubscriberAction } from './actions/confirm-subscriber.action';\r\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\r\nimport { SubscriberApiService } from './subscriber-api.service';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberBusinessProviderService extends ServiceBase {\r\n\r\n  constructor(\r\n    public loggingService: LoggingService,\r\n    @Inject(SubscriberApiService) public subscriberApiService: SubscriberApiService\r\n  ) {\r\n    super(loggingService);\r\n    this.serviceName = 'SubscriberBusinessProviderService';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Running the constructor for ${this.serviceName}`);\r\n  }\r\n\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const action = new RegisterSubscriberAction(subscriber);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    const action = new ConfirmSubscriberAction(confirmationToken);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n}\r\n",
    "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  Http,\r\n  RequestMethod,\r\n  Response,\r\n  Headers,\r\n  RequestOptions\r\n} from '@angular/http';\r\n  import 'rxjs/add/operator/map';\r\n  import 'rxjs/add/operator/catch';\r\n  import 'rxjs/add/operator/observeOn';\r\n  import 'rxjs/add/operator/toPromise';\r\n  // import 'rxjs/add/operator/cache';\r\n  import { Observable } from 'rxjs/Observable';\r\n  import { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\n\r\nimport { HttpBaseService } from '@buildmotion/foundation';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { SubscriberItem } from './../models/subscriber-item.model';\r\nimport { ServiceResponse } from '@buildmotion/foundation';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberApiService extends HttpBaseService {\r\n  url: string = '/api/security';\r\n  serviceName: string;\r\n\r\n  constructor(\r\n    @Inject(Http) public http: Http,\r\n    @Inject(HttpBaseService) public httpService: HttpBaseService,\r\n    // @Inject(ServiceContext) serviceContext: ServiceContext,\r\n    public loggingService: LoggingService\r\n  ) {\r\n    super(http, loggingService);\r\n    this.serviceName = 'SecurityHttpService';\r\n    // this.serviceContext = serviceContext;\r\n  }\r\n\r\n  /**\r\n   * Use to register a new subscriber. \r\n   * @param subscriber contains the subscriber's name and email address. Must be a valid email address.\r\n   */\r\n  public registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    let requestUrl = 'api/subscriber/register';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(subscriber);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = new ServiceResponse();\r\n    // response.IsSuccess = true;\r\n    // response.Message = `Fake message from ${this.serviceName}`;\r\n    // response.Data = true;\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  /**\r\n   * Use to process the confirmation token from a new subscriber. \r\n   * @param confirmationToken \r\n   */\r\n  public confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    let requestUrl = 'api/subscriber/confirmation';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(confirmationToken);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = { IsSuccess: false, Message: `Fake message from ${this.serviceName}` };\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  public retrieveSubscribers() {\r\n    const requestUrl = 'api/subscriber';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = '';\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Get,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n\r\n  public removeSubscriber(subscriber: SubscriberItem) {\r\n    const requestUrl = 'api/subscriber/remove';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = JSON.stringify(subscriber);\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n}\r\n",
    "import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Response } from '@angular/http';\r\nimport { ActionResult } from 'angular-actions';\r\nimport * as rules from 'angular-rules-engine';\r\n\r\nimport { HttpBaseService, ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { Severity } from '@buildmotion/logging';\r\nimport { SubscriberActionBase } from './subscriber-action-base.action';\r\n\r\nimport { Subscriber } from './../../models/subscriber.model';\r\n\r\nexport class RegisterSubscriberAction extends SubscriberActionBase {\r\n\r\n    // response: Observable<Response>;\r\n    response: Observable<ServiceResponse>;\r\n \r\n    constructor(private subscriber: Subscriber) {\r\n        super();\r\n        this.actionName = 'CreateUserSubscriptionAction';\r\n    }\r\n\r\n    /**\r\n     * Override this method from the base [Action] class to allow for rules to be added to the\r\n     * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n     * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n     * of the [Action] framework.\r\n     */\r\n    preValidateAction() {\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n        this.validationContext\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'NameIsValid',\r\n                'The name value is not valid. Must be between 1-40 characters.',\r\n                this.subscriber.Name, 2, 40, true))\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'EmailIsValid',\r\n                'The email address value is not valid. Must be between 8-60 characters.',\r\n                this.subscriber.EmailAddress, 8, 60, true));\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n     * does not contain any rule violations.\r\n     */\r\n    performAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`)\r\n        this.response = this.businessProvider.subscriberApiService.registerSubscriber(this.subscriber);\r\n    }\r\n}\r\n",
    "import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Response } from '@angular/http';\r\nimport { ActionResult } from 'angular-actions';\r\nimport * as rules from 'angular-rules-engine';\r\n\r\nimport { HttpBaseService, ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { Severity } from '@buildmotion/logging';\r\nimport { SubscriberActionBase } from './subscriber-action-base.action';\r\n\r\nimport { ConfirmationToken } from '../..';\r\n\r\nexport class ConfirmSubscriberAction extends SubscriberActionBase {\r\n\r\n    // response: Observable<Response>;\r\n    response: Observable<ServiceResponse>;\r\n\r\n    constructor(private confirmationToken: ConfirmationToken) {\r\n        super();\r\n        this.actionName = 'ConfirmSubscriberAction';\r\n    }\r\n\r\n    /**\r\n     * Override this method from the base [Action] class to allow for rules to be added to the\r\n     * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n     * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n     * of the [Action] framework.\r\n     */\r\n    preValidateAction() {\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n        this.validationContext\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'UserNameIsValid',\r\n                'The user name value is not valid. Must be between 1-80 characters.',\r\n                this.confirmationToken.UserName, 1, 80, true))\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'ConfirmationTokenIsValid',\r\n                'The confirmation token value is not valid.',\r\n                this.confirmationToken.ConfirmationToken, 40, 40, true));\r\n\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n     * does not contain any rule violations.\r\n     */\r\n    performAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`)\r\n        this.response = this.businessProvider.subscriberApiService.confirmSubscriber(this.confirmationToken);\r\n    }\r\n}\r\n",
    "import { Action, ActionResult } from 'angular-actions';\r\nimport { ServiceMessage, ServiceContext, MessageType } from 'angular-rules-engine';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { ActionBase } from '@buildmotion/foundation';\r\nimport { SubscriberBusinessProviderService } from './../subscriber-business-provider.service';\r\n\r\nexport class SubscriberActionBase extends ActionBase {\r\n\r\n    businessProvider: SubscriberBusinessProviderService;\r\n    loggingService: LoggingService;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n     /**\r\n     * Use the [Do] method to perform the action.\r\n     */\r\n    Do(businessProvider: SubscriberBusinessProviderService) {\r\n        this.businessProvider = businessProvider;\r\n        this.serviceContext = businessProvider.serviceContext;\r\n        this.loggingService = businessProvider.loggingService;\r\n\r\n        this.execute();\r\n    }\r\n}",
    "export class Subscriber {\r\n    \r\n    Name: string;\r\n    EmailAddress: string;\r\n    SubscriptionStart: Date = new Date();\r\n\r\n    /**\r\n     * Use to create a new subscriber for the application. This is not an account - only\r\n     * a subscription to resources from the application.\r\n     * @param subscriberName\\\r\n     * @param subscriberEmail\r\n     */\r\n    constructor(subscriberName: string, subscriberEmail: string) {\r\n        this.Name = subscriberName;\r\n        this.EmailAddress = subscriberEmail;\r\n    }\r\n}\r\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"
  ],
  "names": [
    "RouterModule",
    "HttpModule",
    "ReactiveFormsModule",
    "FormsModule",
    "CommonModule",
    "BuildMotionLoggingModule",
    "BuildMotionFoundationModule",
    "BuildMotionCoreModule",
    "NgModule",
    "Output",
    "Router",
    "ActivatedRoute",
    "FormBuilder",
    "LoggingService",
    "Component",
    "ComponentBase",
    "Severity",
    "Validators",
    "EventEmitter",
    "router",
    "tslib_1.__extends",
    "Injectable",
    "ServiceBase",
    "Inject",
    "HttpBaseService",
    "Http",
    "RequestMethod",
    "http",
    "rules.StringIsNotNullEmptyRange",
    "ActionBase"
  ],
  "mappings": "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"
}
