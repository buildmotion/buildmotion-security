{
  "version": 3,
  "file": "buildmotion-security.js",
  "sources": [
    "ng://@buildmotion/security/out/src/app/models/user-account.model.ts",
    "ng://@buildmotion/security/out/src/app/models/subscriber-item.model.ts",
    "ng://@buildmotion/security/out/src/app/models/oauth-response.model.ts",
    "ng://@buildmotion/security/out/src/app/models/credentials.model.ts",
    "ng://@buildmotion/security/out/src/app/security.module.ts",
    "ng://@buildmotion/security/out/src/app/confirm-subscription/confirm-subscription.component.ts",
    "ng://@buildmotion/security/out/src/app/models/confirmation-token.model.ts",
    "ng://@buildmotion/security/out/src/app/subscribe/subscribe.component.ts",
    "ng://@buildmotion/security/out/src/app/security.service.ts",
    "ng://@buildmotion/security/out/src/app/business/subscriber-business-provider.service.ts",
    "ng://@buildmotion/security/out/src/app/business/subscriber-api.service.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/register-subscriber.action.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/confirm-subscriber.action.ts",
    "ng://@buildmotion/security/out/src/app/business/actions/subscriber-action-base.action.ts",
    "ng://@buildmotion/security/out/src/app/models/subscriber.model.ts"
  ],
  "sourcesContent": [
    "\r\n/**\r\n * Use to transport data to create a new account.\r\n */\r\nexport class UserAccount {\r\n    FirstName: string;\r\n    LastName: string;\r\n    Password: string;\r\n    PasswordCopy: string;\r\n    UserName: string;\r\n}\r\n",
    "export class SubscriberItem {\r\n    Id: string;\r\n    EmailAddress: string;\r\n    IsUnsubscribed: boolean;\r\n    IsVerified: boolean;\r\n    Name: string;\r\n    SubscriptionStart: Date = new Date();\r\n    VerifiedDate?: Date;\r\n\r\n    constructor(){\r\n    }\r\n}\r\n",
    "\r\n/**\r\n * Contains the response data from the OWIN OAuth provider. \r\n */\r\nexport class OAuthResponse {\r\n    access_token: string;\r\n    expires_in: number;\r\n    token_type: string;\r\n\r\n    /**\r\n     * Use to return a string representing the OAuthResponse.\r\n     */\r\n    toString() {\r\n        return `access_token: ${this.access_token}; expires_in: ${this.expires_in}; token_type: ${this.token_type}`;\r\n    }\r\n}",
    "export class Credentials {\r\n    UserName: string;\r\n    Password: string;\r\n\r\n    /**\r\n     * Use to contain credentials for the login process.\r\n     * @param username: The user name for the specified application user.\r\n     * @param password: The password for the specified user.\r\n     */\r\n    constructor(username: string, password: string) {\r\n        this.UserName = username;\r\n        this.Password = password;\r\n    }\r\n\r\n    toString(){\r\n        return `UserName: ${this.UserName}; Password: ************`;\r\n    }\r\n}\r\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { BuildMotionLoggingModule } from '@buildmotion/logging';\r\nimport { BuildMotionCoreModule } from '@buildmotion/core';\r\nimport { BuildMotionFoundationModule } from '@buildmotion/foundation';\r\nimport { SubscribeComponent } from './subscribe/subscribe.component';\r\n\r\n// INTERNAL INJECTABLE SERVICES\r\nimport { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\nimport { SubscriberApiService } from './business/subscriber-api.service';\r\nimport { ConfirmSubscriptionComponent } from './confirm-subscription/confirm-subscription.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    BuildMotionCoreModule,\r\n    BuildMotionFoundationModule,\r\n    BuildMotionLoggingModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [SubscribeComponent, ConfirmSubscriptionComponent],\r\n  exports: [\r\n    ConfirmSubscriptionComponent,\r\n    SubscribeComponent\r\n  ],\r\n  providers: [\r\n    SubscriberApiService, //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n    SubscriberBusinessProviderService //PROVIDE INTERNAL SERVICES FOR THE MODULE; SCOPED TO THIS MODULE;\r\n  ]\r\n})\r\nexport class BuildMotionSecurityModule { }\r\n",
    "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { ComponentBase } from '@buildmotion/core';\r\n// import { BuildMotionSecurityService, ConfirmationToken } from '..';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { BuildMotionSecurityService } from './../security.service';\r\nimport { ConfirmationToken } from './../models/confirmation-token.model';\r\n\r\n@Component({\r\n  selector: 'bm-confirm-subscription',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-envelope prefix\"></i>\r\n      <input type=\"text\" id=\"UserName\" class=\"form-control\" formControlName=\"UserName\">\r\n      <label for=\"UserName\">Your email address.</label>\r\n    </div>\r\n  \r\n    <div class=\"md-form\">\r\n      <i class=\"fa fa-person prefix\"></i>\r\n      <input type=\"text\" id=\"ConfirmationToken\" class=\"form-control\" formControlName=\"ConfirmationToken\">\r\n      <label for=\"ConfirmationToken\">Enter token from email.</label>\r\n    </div>\r\n  \r\n    <div class=\"text-xs-center\">\r\n      <button class=\"btn btn-lime\" type=\"submit\">Confirm Account</button>\r\n    </div>\r\n  </form>`\r\n})\r\nexport class ConfirmSubscriptionComponent extends ComponentBase implements OnInit {\r\n  @Output() confirm = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  email: string = '';\r\n  confirmationToken: string = '';\r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    router: Router\r\n  ) {  \r\n    super(`ConfirmSubscriptionComponent`, loggingService, router);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Running [ngOnInit] for ${this.componentName}`);\r\n    this.retrieveQueryParams();\r\n  }\r\n\r\n  retrieveQueryParams() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to retrieve the [queryParams] from ${this.componentName}.`);\r\n    try {\r\n      this.route.params\r\n        .map((params: Params) => (params['email'])).subscribe(\r\n        response => this.handleEmailParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n\r\n      this.route.params\r\n        .map((params: Params) => (params['confirmationToken'])).subscribe(\r\n        response => this.handleConfirmationTokenParam(response),\r\n        error => this.handleServiceErrors(error),\r\n        () => this.finishRequest('retrieveQueryParams')\r\n        );\r\n    } catch (error) {\r\n      this.handleServiceErrors(error);\r\n    }\r\n  }\r\n\r\n  handleConfirmationTokenParam(token: string) {\r\n    if (token) {\r\n      this.confirmationToken = token;\r\n      this.buildForm(); // begin form build after the params are retrieved from the url;\r\n    }\r\n  }\r\n\r\n  handleEmailParam(emailParam: string) {\r\n    if (emailParam) {\r\n      this.email = emailParam;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use to build the form for the specified target entity.\r\n   */\r\n  buildForm() {\r\n    this._form = this.formBuilder.group({\r\n      UserName: [this.email, Validators.required],\r\n      ConfirmationToken: [this.confirmationToken, Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Form: {form | json}`);\r\n    this.resetAlertNotifications();\r\n    let token = new ConfirmationToken(this._form.value.UserName, this._form.value.ConfirmationToken);\r\n    this.securityService.confirmSubscriber(token).subscribe(\r\n      response => this.handleSubmit(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubmit(response: ServiceResponse | ErrorResponse ) {\r\n    this.loggingService.log(this.componentName, Severity.Information, `Preparing to handle the response from the ${this.securityService.serviceName} in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed subscriber confirmation.`);\r\n        this.confirm.emit(response as ServiceResponse);\r\n      } else {\r\n        this.loggingService.log(this.componentName, Severity.Error, `${this.componentName}; Status is fail.`);\r\n        this.showResponseErrors(response as ErrorResponse);\r\n      }\r\n    } else {\r\n      this.loggingService.log(this.componentName, Severity.Error, 'Unexpected service error...I guess the application pooped its pants, ouch!!');\r\n    }\r\n  }\r\n\r\n}\r\n",
    "\r\n/**\r\n * Use the model for account confirmation information.\r\n */\r\nexport class ConfirmationToken {\r\n\r\n    /**\r\n     * Constructor for the account confirmation token information. \r\n     */\r\n    constructor(public UserName: string, public ConfirmationToken: string) { }\r\n}\r\n",
    "import { Component, OnInit, Output, ViewChild, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { ComponentBase } from '@buildmotion/core';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { BuildMotionSecurityService } from './../security.service';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\n\r\n@Component({\r\n  selector: 'bm-subscribe',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <!-- SUBSCRIBER NAME -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons users_circle-08\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\r\n    </div>\r\n    <!-- SUBSCRIBER EMAIL -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons ui-1_email-85\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\r\n    </div>\r\n    <!-- SUBSCRIBE BUTTON -->\r\n    <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\r\n      <i class=\"fa fa-check ml-1\"></i>\r\n    </button>\r\n  </form>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->`\r\n})\r\nexport class SubscribeComponent extends ComponentBase implements OnInit { \r\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  subscriber: Subscriber;\r\n  \r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    router: Router\r\n  ) {\r\n    super('SubscribeComponent', loggingService, router)\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(): void {\r\n    this._form = this.formBuilder.group({\r\n      subscriberName: ['', Validators.required],\r\n      emailAddress: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.securityService.serviceContext.Messages = [];\r\n    this.subscriber = new Subscriber(this._form.value.subscriberName, this._form.value.emailAddress);\r\n    this.subscribeUser(this.subscriber);\r\n  }\r\n\r\n  subscribeUser(subscriber: Subscriber) {\r\n    this.securityService.registerSubscriber(subscriber).subscribe(\r\n      response => this.handleSubscribeUser(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubscribeUser(response: ServiceResponse | ErrorResponse) {\r\n    const functionName = 'handleSubscribeUser';\r\n    this.loggingService.log(this.componentName, Severity.Information, `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed request to create subscriber. Prepare to download...`);\r\n        this.subscribe.emit(response as ServiceResponse);\r\n      } else {\r\n        this.handleServiceErrors(response as ErrorResponse, this.securityService.serviceContext);\r\n      }\r\n    } else {\r\n      // TODO: NEED TO HANDLE\r\n    }\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ServiceBase, ServiceResponse } from '@buildmotion/foundation';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './models/subscriber.model';\r\n\r\nimport { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\nimport { ConfirmationToken } from '.';\r\n\r\n@Injectable()\r\nexport class BuildMotionSecurityService extends ServiceBase {\r\n\r\n  constructor(\r\n    loggingService: LoggingService,\r\n    private businessProvider: SubscriberBusinessProviderService\r\n  ) {\r\n    super(loggingService)\r\n    this.serviceName = 'SecurityService';\r\n    this.businessProvider.serviceContext = this.serviceContext;\r\n\r\n\r\n    this.businessProvider.loggingService = this.loggingService;\r\n   }\r\n\r\n   /**\r\n    * Use to register a new subscriber to the application.\r\n    * @param subscriber contains the user name and email address for the subscriber.\r\n    */\r\n   registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to create a new subscription.`);\r\n    return this.businessProvider.registerSubscriber(subscriber);\r\n  }\r\n\r\n  /**\r\n   * Use to confirm a new subscriber.\r\n   * @param confirmationToken contains the user name and a [Hash] value that is used to confirm the user. \r\n   */\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to confirm subscriber.`);\r\n    return this.businessProvider.confirmSubscriber(confirmationToken)\r\n  }\r\n}\r\n",
    "import { Injectable, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { ServiceBase, ServiceResponse } from '@buildmotion/foundation';\r\n\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { ConfirmSubscriberAction } from './actions/confirm-subscriber.action';\r\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\r\nimport { SubscriberApiService } from './subscriber-api.service';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberBusinessProviderService extends ServiceBase {\r\n\r\n  constructor(\r\n    public loggingService: LoggingService,\r\n    @Inject(SubscriberApiService) public subscriberApiService: SubscriberApiService\r\n  ) {\r\n    super(loggingService);\r\n    this.serviceName = 'SubscriberBusinessProviderService';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Running the constructor for ${this.serviceName}`);\r\n  }\r\n\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const action = new RegisterSubscriberAction(subscriber);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    const action = new ConfirmSubscriberAction(confirmationToken);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n}\r\n",
    "import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  Http,\r\n  RequestMethod,\r\n  Response,\r\n  Headers,\r\n  RequestOptions\r\n} from '@angular/http';\r\n  import 'rxjs/add/operator/map';\r\n  import 'rxjs/add/operator/catch';\r\n  import 'rxjs/add/operator/observeOn';\r\n  import 'rxjs/add/operator/toPromise';\r\n  // import 'rxjs/add/operator/cache';\r\n  import { Observable } from 'rxjs/Observable';\r\n  import { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\n\r\nimport { HttpBaseService } from '@buildmotion/foundation';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { SubscriberItem } from './../models/subscriber-item.model';\r\nimport { ServiceResponse } from '@buildmotion/foundation';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberApiService extends HttpBaseService {\r\n  url: string = '/api/security';\r\n  serviceName: string;\r\n\r\n  constructor(\r\n    @Inject(Http) public http: Http,\r\n    @Inject(HttpBaseService) public httpService: HttpBaseService,\r\n    // @Inject(ServiceContext) serviceContext: ServiceContext,\r\n    public loggingService: LoggingService\r\n  ) {\r\n    super(http, loggingService);\r\n    this.serviceName = 'SecurityHttpService';\r\n    // this.serviceContext = serviceContext;\r\n  }\r\n\r\n  /**\r\n   * Use to register a new subscriber. \r\n   * @param subscriber contains the subscriber's name and email address. Must be a valid email address.\r\n   */\r\n  public registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    let requestUrl = 'api/subscriber/register';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(subscriber);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = new ServiceResponse();\r\n    // response.IsSuccess = true;\r\n    // response.Message = `Fake message from ${this.serviceName}`;\r\n    // response.Data = true;\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  /**\r\n   * Use to process the confirmation token from a new subscriber. \r\n   * @param confirmationToken \r\n   */\r\n  public confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    let requestUrl = 'api/subscriber/confirmation';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(confirmationToken);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = { IsSuccess: false, Message: `Fake message from ${this.serviceName}` };\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  public retrieveSubscribers() {\r\n    const requestUrl = 'api/subscriber';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = '';\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Get,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n\r\n  public removeSubscriber(subscriber: SubscriberItem) {\r\n    const requestUrl = 'api/subscriber/remove';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = JSON.stringify(subscriber);\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n}\r\n",
    "import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Response } from '@angular/http';\r\nimport { ActionResult } from 'angular-actions';\r\nimport * as rules from 'angular-rules-engine';\r\n\r\nimport { HttpBaseService, ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { Severity } from '@buildmotion/logging';\r\nimport { SubscriberActionBase } from './subscriber-action-base.action';\r\n\r\nimport { Subscriber } from './../../models/subscriber.model';\r\n\r\nexport class RegisterSubscriberAction extends SubscriberActionBase {\r\n\r\n    // response: Observable<Response>;\r\n    response: Observable<ServiceResponse>;\r\n \r\n    constructor(private subscriber: Subscriber) {\r\n        super();\r\n        this.actionName = 'CreateUserSubscriptionAction';\r\n    }\r\n\r\n    /**\r\n     * Override this method from the base [Action] class to allow for rules to be added to the\r\n     * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n     * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n     * of the [Action] framework.\r\n     */\r\n    preValidateAction() {\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n        this.validationContext\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'NameIsValid',\r\n                'The name value is not valid. Must be between 1-40 characters.',\r\n                this.subscriber.Name, 2, 40, true))\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'EmailIsValid',\r\n                'The email address value is not valid. Must be between 8-60 characters.',\r\n                this.subscriber.EmailAddress, 8, 60, true));\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n     * does not contain any rule violations.\r\n     */\r\n    performAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`)\r\n        this.response = this.businessProvider.subscriberApiService.registerSubscriber(this.subscriber);\r\n    }\r\n}\r\n",
    "import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Response } from '@angular/http';\r\nimport { ActionResult } from 'angular-actions';\r\nimport * as rules from 'angular-rules-engine';\r\n\r\nimport { HttpBaseService, ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\nimport { Severity } from '@buildmotion/logging';\r\nimport { SubscriberActionBase } from './subscriber-action-base.action';\r\n\r\nimport { ConfirmationToken } from '../..';\r\n\r\nexport class ConfirmSubscriberAction extends SubscriberActionBase {\r\n\r\n    // response: Observable<Response>;\r\n    response: Observable<ServiceResponse>;\r\n\r\n    constructor(private confirmationToken: ConfirmationToken) {\r\n        super();\r\n        this.actionName = 'ConfirmSubscriberAction';\r\n    }\r\n\r\n    /**\r\n     * Override this method from the base [Action] class to allow for rules to be added to the\r\n     * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n     * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n     * of the [Action] framework.\r\n     */\r\n    preValidateAction() {\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n        this.validationContext\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'UserNameIsValid',\r\n                'The user name value is not valid. Must be between 1-80 characters.',\r\n                this.confirmationToken.UserName, 1, 80, true))\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'ConfirmationTokenIsValid',\r\n                'The confirmation token value is not valid.',\r\n                this.confirmationToken.ConfirmationToken, 40, 40, true));\r\n\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n     * does not contain any rule violations.\r\n     */\r\n    performAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`)\r\n        this.response = this.businessProvider.subscriberApiService.confirmSubscriber(this.confirmationToken);\r\n    }\r\n}\r\n",
    "import { Action, ActionResult } from 'angular-actions';\r\nimport { ServiceMessage, ServiceContext, MessageType } from 'angular-rules-engine';\r\n\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { ActionBase } from '@buildmotion/foundation';\r\nimport { SubscriberBusinessProviderService } from './../subscriber-business-provider.service';\r\n\r\nexport class SubscriberActionBase extends ActionBase {\r\n\r\n    businessProvider: SubscriberBusinessProviderService;\r\n    loggingService: LoggingService;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n     /**\r\n     * Use the [Do] method to perform the action.\r\n     */\r\n    Do(businessProvider: SubscriberBusinessProviderService) {\r\n        this.businessProvider = businessProvider;\r\n        this.serviceContext = businessProvider.serviceContext;\r\n        this.loggingService = businessProvider.loggingService;\r\n\r\n        this.execute();\r\n    }\r\n}",
    "export class Subscriber {\r\n    \r\n    Name: string;\r\n    EmailAddress: string;\r\n    SubscriptionStart: Date = new Date();\r\n\r\n    /**\r\n     * Use to create a new subscriber for the application. This is not an account - only\r\n     * a subscription to resources from the application.\r\n     * @param subscriberName\\\r\n     * @param subscriberEmail\r\n     */\r\n    constructor(subscriberName: string, subscriberEmail: string) {\r\n        this.Name = subscriberName;\r\n        this.EmailAddress = subscriberEmail;\r\n    }\r\n}\r\n"
  ],
  "names": [
    "rules.StringIsNotNullEmptyRange"
  ],
  "mappings": "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"
}
