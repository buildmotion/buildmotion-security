{"version":3,"file":"subscriber-business-provider.service.js","sourceRoot":"","sources":["../../src/app/business/subscriber-business-provider.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAGnD,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/D,OAAO,EAAE,WAAW,EAAmB,MAAM,wBAAwB,CAAC;AAGtE,OAAO,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAC9E,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;;IAIT,qDAAW;IAEhE,2CACS,gBAC8B;QAFvC,YAIE,kBAAM,cAAc,CAAC,SAGtB;QANQ,oBAAc,GAAd,cAAc;QACgB,0BAAoB,GAApB,oBAAoB;QAGzD,KAAI,CAAC,WAAW,GAAG,mCAAmC,CAAC;QACvD,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,iCAA+B,KAAI,CAAC,WAAa,CAAC,CAAC;;KACpH;;;;;IAED,8DAAkB;;;;IAAlB,UAAmB,UAAsB;QACvC,qBAAM,MAAM,GAAG,IAAI,wBAAwB,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAChB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;KACxB;;;;;IAED,6DAAiB;;;;IAAjB,UAAkB,iBAAoC;QACpD,qBAAM,MAAM,GAAG,IAAI,uBAAuB,CAAC,iBAAiB,CAAC,CAAC;QAC9D,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAChB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;KACxB;;gBAtBF,UAAU;;;;gBATF,cAAc;gBAMd,oBAAoB,uBAQxB,MAAM,SAAC,oBAAoB;;4CAjBhC;EAauD,WAAW;SAArD,iCAAiC","sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { LoggingService, Severity } from 'buildmotion-logging';\r\nimport { ServiceBase, ServiceResponse } from 'buildmotion-foundation';\r\n\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { ConfirmSubscriberAction } from './actions/confirm-subscriber.action';\r\nimport { RegisterSubscriberAction } from './actions/register-subscriber.action';\r\nimport { SubscriberApiService } from './subscriber-api.service';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberBusinessProviderService extends ServiceBase {\r\n\r\n  constructor(\r\n    public loggingService: LoggingService,\r\n    @Inject(SubscriberApiService) public subscriberApiService: SubscriberApiService\r\n  ) {\r\n    super(loggingService);\r\n    this.serviceName = 'SubscriberBusinessProviderService';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Running the constructor for ${this.serviceName}`);\r\n  }\r\n\r\n  registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    const action = new RegisterSubscriberAction(subscriber);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    const action = new ConfirmSubscriberAction(confirmationToken);\r\n    action.Do(this);\r\n    return action.response;\r\n  }\r\n}\r\n"]}