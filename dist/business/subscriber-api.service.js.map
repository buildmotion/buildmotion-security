{"version":3,"file":"subscriber-api.service.js","sourceRoot":"","sources":["../../src/app/business/subscriber-api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  Http,\r\n  RequestMethod,\r\n  Response,\r\n  Headers,\r\n  RequestOptions\r\n} from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/observeOn';\r\nimport 'rxjs/add/operator/toPromise';\r\n// import 'rxjs/add/operator/cache';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\nimport { LoggingService, Severity } from 'buildmotion-logging';\r\n\r\nimport { HttpBaseService } from 'buildmotion-foundation';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { SubscriberItem } from './../models/subscriber-item.model';\r\nimport { ServiceResponse } from 'buildmotion-foundation';\r\nimport { ServiceContext } from 'angular-rules-engine';\r\nimport { ConfirmationToken } from '..';\r\n\r\n@Injectable()\r\nexport class SubscriberApiService extends HttpBaseService {\r\n  url: string = '/api/security';\r\n  serviceName: string;\r\n\r\n  constructor(\r\n    @Inject(Http) public http: Http,\r\n    @Inject(HttpBaseService) public httpService: HttpBaseService,\r\n    // @Inject(ServiceContext) serviceContext: ServiceContext,\r\n    public loggingService: LoggingService\r\n  ) {\r\n    super(http, loggingService);\r\n    this.serviceName = 'SecurityHttpService';\r\n    // this.serviceContext = serviceContext;\r\n  }\r\n\r\n  /**\r\n   * Use to register a new subscriber. \r\n   * @param subscriber contains the subscriber's name and email address. Must be a valid email address.\r\n   */\r\n  public registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    let requestUrl = 'api/subscriber/register';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(subscriber);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = new ServiceResponse();\r\n    // response.IsSuccess = true;\r\n    // response.Message = `Fake message from ${this.serviceName}`;\r\n    // response.Data = true;\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  /**\r\n   * Use to process the confirmation token from a new subscriber. \r\n   * @param confirmationToken \r\n   */\r\n  public confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    let requestUrl = 'api/subscriber/confirmation';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    let body = JSON.stringify(confirmationToken);\r\n    let options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n\r\n    /**TEMPORARY IMPLEMENTATION */\r\n    // let response = { IsSuccess: false, Message: `Fake message from ${this.serviceName}` };\r\n    // let subject: BehaviorSubject<any> = new BehaviorSubject(response);\r\n    // return subject.asObservable();\r\n    /**TEMPORARY IMPLEMENTATION */\r\n  }\r\n\r\n  public retrieveSubscribers() {\r\n    const requestUrl = 'api/subscriber';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = '';\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Get,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n\r\n  public removeSubscriber(subscriber: SubscriberItem) {\r\n    const requestUrl = 'api/subscriber/remove';\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\r\n\r\n    const body = JSON.stringify(subscriber);\r\n    const options = this.httpService.createRequestOptions(\r\n      RequestMethod.Post,\r\n      this.httpService.createHeader(false),\r\n      requestUrl,\r\n      body);\r\n    return this.httpService.executeRequest(options);\r\n  }\r\n}\r\n"]}