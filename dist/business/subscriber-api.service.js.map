{"version":3,"file":"subscriber-api.service.js","sourceRoot":"","sources":["../../src/app/business/subscriber-api.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EACL,IAAI,EACJ,aAAa,EAId,MAAM,eAAe,CAAC;AACvB,OAAO,uBAAuB,CAAC;AAC/B,OAAO,yBAAyB,CAAC;AACjC,OAAO,6BAA6B,CAAC;AACrC,OAAO,6BAA6B,CAAC;AAGrC,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/D,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AAGzD,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;;IAQvD,8BACuB,MACW,aAEzB;QAHc,SAAI,GAAJ,IAAI;QACO,gBAAW,GAAX,WAAW;QAEpC,mBAAc,GAAd,cAAc;mBART,eAAe;;QAW3B,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC;;KAE1C;;;;;IAEM,iDAAkB;;;;cAAC,UAAsB;QAC9C,qBAAM,UAAU,GAAG,yBAAyB,CAAC;QAC7C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAK,IAAI,CAAC,WAAW,4BAAuB,UAAY,CAAC,CAAC;;;;QAWxH,qBAAI,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACrC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,QAAQ,CAAC,OAAO,GAAG,uBAAqB,IAAI,CAAC,WAAa,CAAC;QAC3D,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,qBAAI,OAAO,GAAyB,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC;QAClE,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;;;;;;IAIzB,kDAAmB;;;;QACxB,qBAAM,UAAU,GAAG,gBAAgB,CAAC;QACpC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAK,IAAI,CAAC,WAAW,4BAAuB,UAAY,CAAC,CAAC;QAExH,qBAAM,IAAI,GAAG,EAAE,CAAC;QAChB,qBAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CACnD,aAAa,CAAC,GAAG,EACjB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,EACpC,UAAU,EACV,IAAI,CAAC,CAAC;QACR,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;;;;;IAG3C,+CAAgB;;;;cAAC,UAA0B;QAChD,qBAAM,UAAU,GAAG,uBAAuB,CAAC;QAC3C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAK,IAAI,CAAC,WAAW,4BAAuB,UAAY,CAAC,CAAC;QAExH,qBAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACxC,qBAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CACnD,aAAa,CAAC,IAAI,EAClB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,EACpC,UAAU,EACV,IAAI,CAAC,CAAC;QACR,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;;gBA9DnD,UAAU;;;;gBArBT,IAAI,uBA4BD,MAAM,SAAC,IAAI;gBAZP,eAAe,uBAanB,MAAM,SAAC,eAAe;gBAflB,cAAc;;+BAhBvB;;SAwBa,oBAAoB","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport {\n  Http,\n  RequestMethod,\n  Response,\n  Headers,\n  RequestOptions\n} from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/observeOn';\nimport 'rxjs/add/operator/toPromise';\n// import 'rxjs/add/operator/cache';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { LoggingService, Severity } from 'buildmotion-logging';\n\nimport { HttpBaseService } from 'buildmotion-foundation';\nimport { Subscriber } from './../models/subscriber.model';\nimport { SubscriberItem } from './../models/subscriber-item.model';\nimport { ServiceResponse } from 'buildmotion-foundation';\n\n@Injectable()\nexport class SubscriberApiService {\n  url: string = '/api/security';\n  data: Observable<Response>;\n  serviceName: string;\n\n  constructor(\n    @Inject(Http) public http: Http,\n    @Inject(HttpBaseService) public httpService: HttpBaseService,\n    // @Inject(ServiceContext) serviceContext: ServiceContext,\n    public loggingService: LoggingService\n  ) {\n    // super(loggingService);\n    this.serviceName = 'SecurityHttpService';\n    // this.serviceContext = serviceContext;\n  }\n\n  public registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\n    const requestUrl = 'api/subscriber/register';\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\n\n    // const body = JSON.stringify(subscriber);\n    // const options = this.httpService.createRequestOptions(\n    //   RequestMethod.Post,\n    //   this.httpService.createHeader(false),\n    //   requestUrl,\n    //   body);\n    // return this.httpService.executeRequest(options);\n\n    /**TEMPORARY IMPLEMENTATION */\n    let response = new ServiceResponse();\n    response.IsSuccess = true;\n    response.Message = `Fake message from ${this.serviceName}`;\n    response.Data = true;\n    let subject: BehaviorSubject<any> = new BehaviorSubject(response);\n    return subject.asObservable();\n    /**TEMPORARY IMPLEMENTATION */\n  }\n\n  public retrieveSubscribers() {\n    const requestUrl = 'api/subscriber';\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\n\n    const body = '';\n    const options = this.httpService.createRequestOptions(\n      RequestMethod.Get,\n      this.httpService.createHeader(false),\n      requestUrl,\n      body);\n    return this.httpService.executeRequest(options);\n  }\n\n  public removeSubscriber(subscriber: SubscriberItem) {\n    const requestUrl = 'api/subscriber/remove';\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to call: ${requestUrl}`);\n\n    const body = JSON.stringify(subscriber);\n    const options = this.httpService.createRequestOptions(\n      RequestMethod.Post,\n      this.httpService.createHeader(false),\n      requestUrl,\n      body);\n    return this.httpService.executeRequest(options);\n  }\n}\n"]}