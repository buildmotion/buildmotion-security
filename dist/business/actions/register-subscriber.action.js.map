{"version":3,"file":"register-subscriber.action.js","sourceRoot":"","sources":["../../../src/app/business/actions/register-subscriber.action.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,OAAO,2BAA2B,CAAC;AAKnC,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAG9C,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AAIvE,IAAA;IAA8C,4CAAoB;IAM9D,kCAAoB,UAAsB;QAA1C,YACI,iBAAO,SAEV;QAHmB,gBAAU,GAAV,UAAU,CAAY;QAEtC,KAAI,CAAC,UAAU,GAAG,8BAA8B,CAAC;;KACpD;IAED;;;;;OAKG;;;;;;;;IACH,oDAAiB;;;;;;;IAAjB;QACI,OAAO,CAAC,GAAG,CAAC,6CAA2C,IAAI,CAAC,UAAU,aAAU,CAAC,CAAC;QAClF,IAAI,CAAC,iBAAiB;aACjB,OAAO,CAAC,IAAI,KAAK,CAAC,yBAAyB,CACxC,aAAa,EACb,+DAA+D,EAC/D,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;aACtC,OAAO,CAAC,IAAI,KAAK,CAAC,yBAAyB,CACxC,cAAc,EACd,wEAAwE,EACxE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;KACvD;IAED;;;OAGG;;;;;;IACH,gDAAa;;;;;IAAb;QACI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,WAAW,EAAE,yCAAuC,IAAI,CAAC,UAAU,MAAG,CAAC,CAAA;QACzH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAClG;mCAnDL;EAc8C,oBAAoB,EAsCjE,CAAA;AAtCD,oCAsCC","sourcesContent":["import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport { BehaviorSubject } from 'rxjs/Rx';\r\n\r\nimport { Response } from '@angular/http';\r\nimport { ActionResult } from 'angular-actions';\r\nimport * as rules from 'angular-rules-engine';\r\n\r\nimport { HttpBaseService, ServiceResponse, ErrorResponse } from 'buildmotion-foundation';\r\nimport { Severity } from 'buildmotion-logging';\r\nimport { SubscriberActionBase } from './subscriber-action-base.action';\r\n\r\nimport { Subscriber } from './../../models/subscriber.model';\r\n\r\nexport class RegisterSubscriberAction extends SubscriberActionBase {\r\n\r\n    // response: Observable<Response>;\r\n    response: Observable<ServiceResponse>;\r\n    httpBase: HttpBaseService;\r\n\r\n    constructor(private subscriber: Subscriber) {\r\n        super();\r\n        this.actionName = 'CreateUserSubscriptionAction';\r\n    }\r\n\r\n    /**\r\n     * Override this method from the base [Action] class to allow for rules to be added to the\r\n     * action's [ValidationContext]. Any rules added to the [ValidationContext] here will be executed when\r\n     * the action's [ValidateAction] method is called - this method is just one of many pipeline methods\r\n     * of the [Action] framework.\r\n     */\r\n    preValidateAction() {\r\n        console.log(`Running the [preValidateAction] for the ${this.actionName} action.`);\r\n        this.validationContext\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'NameIsValid',\r\n                'The name value is not valid. Must be between 1-40 characters.',\r\n                this.subscriber.Name, 2, 40, true))\r\n            .addRule(new rules.StringIsNotNullEmptyRange(\r\n                'EmailIsValid',\r\n                'The email address value is not valid. Must be between 8-60 characters.',\r\n                this.subscriber.EmailAddress, 8, 60, true));\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide business logic implementation - this method is allowed to execute only if the current action\r\n     * does not contain any rule violations.\r\n     */\r\n    performAction() {\r\n        this.loggingService.log(this.actionName, Severity.Information, `Running the [performAction] for the ${this.actionName}.`)\r\n        this.response = this.businessProvider.subscriberApiService.registerSubscriber(this.subscriber);\r\n    }\r\n}\r\n"]}