{"version":3,"file":"security.service.js","sourceRoot":"","sources":["../src/app/security.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,sBAAsB;AAE3C,OAAO,EAAE,WAAW,EAAmB,gCAAgC;AACvE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,6BAA6B;AAGhE,OAAO,EAAE,iCAAiC,EAAE,wDAAwD;;IAIpD,8CAAW;IAEzD,oCACE,cAA8B,EACtB;QAFV,YAIE,kBAAM,cAAc,CAAC,SAMrB;QARQ,sBAAgB,GAAhB,gBAAgB;QAGxB,KAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC;QACrC,KAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC;QAG3D,KAAI,CAAC,gBAAgB,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC;;KAC3D;IAED;;;OAGG;;;;;;IACH,uDAAkB;;;;;IAAlB,UAAmB,UAAsB;QACxC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAK,IAAI,CAAC,WAAW,6CAA0C,CAAC,CAAC;QAC/H,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;KAC7D;IAED;;;OAGG;;;;;;IACH,sDAAiB;;;;;IAAjB,UAAkB,iBAAoC;QACpD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,kCAAkC,CAAC,CAAC;QACpG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAA;KAClE;;gBA/BF,UAAU;;;;gBANF,cAAc;gBAGd,iCAAiC;;qCAN1C;EAUgD,WAAW;SAA9C,0BAA0B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ServiceBase, ServiceResponse } from '@buildmotion/foundation';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './models/subscriber.model';\r\n\r\nimport { SubscriberBusinessProviderService } from './business/subscriber-business-provider.service';\r\nimport { ConfirmationToken } from '.';\r\n\r\n@Injectable()\r\nexport class BuildMotionSecurityService extends ServiceBase {\r\n\r\n  constructor(\r\n    loggingService: LoggingService,\r\n    private businessProvider: SubscriberBusinessProviderService\r\n  ) {\r\n    super(loggingService)\r\n    this.serviceName = 'SecurityService';\r\n    this.businessProvider.serviceContext = this.serviceContext;\r\n\r\n\r\n    this.businessProvider.loggingService = this.loggingService;\r\n   }\r\n\r\n   /**\r\n    * Use to register a new subscriber to the application.\r\n    * @param subscriber contains the user name and email address for the subscriber.\r\n    */\r\n   registerSubscriber(subscriber: Subscriber): Observable<ServiceResponse> {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `${this.serviceName} preparing to create a new subscription.`);\r\n    return this.businessProvider.registerSubscriber(subscriber);\r\n  }\r\n\r\n  /**\r\n   * Use to confirm a new subscriber.\r\n   * @param confirmationToken contains the user name and a [Hash] value that is used to confirm the user. \r\n   */\r\n  confirmSubscriber(confirmationToken: ConfirmationToken) {\r\n    this.loggingService.log(this.serviceName, Severity.Information, `Preparing to confirm subscriber.`);\r\n    return this.businessProvider.confirmSubscriber(confirmationToken)\r\n  }\r\n}\r\n"]}