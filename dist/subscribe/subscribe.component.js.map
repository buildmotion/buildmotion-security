{"version":3,"file":"subscribe.component.js","sourceRoot":"","sources":["../../src/app/subscribe/subscribe.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Output, ViewChild, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators\n} from '@angular/forms';\nimport { ComponentBase } from 'buildmotion-core';\nimport { LoggingService, Severity } from 'buildmotion-logging';\nimport { Subscriber } from './../models/subscriber.model';\nimport { SecurityService } from './../security.service';\nimport { ServiceResponse, ErrorResponse } from 'buildmotion-foundation';\n\n@Component({\n  selector: 'bm-subscribe',\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\n  <!-- SUBSCRIBE SIGN-UP FORM -->\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\n    <!-- SUBSCRIBER NAME -->\n    <div class=\"input-group form-group-no-border\">\n      <span class=\"input-group-addon\">\n        <i class=\"now-ui-icons users_circle-08\"></i>\n      </span>\n      <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\n    </div>\n    <!-- SUBSCRIBER EMAIL -->\n    <div class=\"input-group form-group-no-border\">\n      <span class=\"input-group-addon\">\n        <i class=\"now-ui-icons ui-1_email-85\"></i>\n      </span>\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\n    </div>\n    <!-- SUBSCRIBE BUTTON -->\n    <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\n      <i class=\"fa fa-check ml-1\"></i>\n    </button>\n  </form>\n  <!-- SUBSCRIBE SIGN-UP FORM -->`\n})\nexport class SubscribeComponent extends ComponentBase implements OnInit {\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\n  _form: FormGroup;\n  subscriber: Subscriber;\n  \n\n  constructor(\n    private securityService: SecurityService,\n    loggingService: LoggingService,\n    public formBuilder: FormBuilder,\n    router: Router\n  ) {\n    super('SubscribeComponent', loggingService, router)\n  }\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this._form = this.formBuilder.group({\n      subscriberName: ['', Validators.required],\n      emailAddress: ['', Validators.required]\n    });\n  }\n\n  submitForm() {\n    this.subscriber = new Subscriber(this._form.value.subscriberName, this._form.value.emailAddress);\n    this.subscribeUser(this.subscriber);\n  }\n\n  subscribeUser(subscriber: Subscriber) {\n    this.securityService.registerSubscriber(subscriber).subscribe(\n      response => this.handleSubscribeUser(response),\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\n      () => this.finishRequest(this.componentName)\n    );\n  }\n\n  handleSubscribeUser(response: ServiceResponse | ErrorResponse) {\n    const functionName = 'handleSubscribeUser';\n    this.loggingService.log(this.componentName, Severity.Information, `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${this.componentName}.`);\n    if (response) {\n      if (response.IsSuccess) {\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed request to create subscriber. Prepare to download...`);\n        this.subscribe.emit(response as ServiceResponse);\n      } else {\n        this.handleServiceErrors(response as ErrorResponse, this.securityService.serviceContext);\n      }\n    } else {\n      // TODO: NEED TO HANDLE\n    }\n  }\n}\n"]}