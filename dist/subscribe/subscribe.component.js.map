{"version":3,"file":"subscribe.component.js","sourceRoot":"","sources":["../../src/app/subscribe/subscribe.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Output, ViewChild, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { ComponentBase } from '@buildmotion/core';\r\nimport { LoggingService, Severity } from '@buildmotion/logging';\r\nimport { Subscriber } from './../models/subscriber.model';\r\nimport { BuildMotionSecurityService } from './../security.service';\r\nimport { ServiceResponse, ErrorResponse } from '@buildmotion/foundation';\r\n\r\n@Component({\r\n  selector: 'bm-subscribe',\r\n  template: `<buildmotion-alert [alertNotification]=\"alertNotification\" [hasMessage]=\"alertNotification.showAlert\"></buildmotion-alert>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->\r\n  <form [formGroup]=\"_form\" (ngSubmit)=\"submitForm()\">\r\n    <!-- SUBSCRIBER NAME -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons users_circle-08\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"subscriberName\" class=\"form-control\" placeholder=\"Name...\">\r\n    </div>\r\n    <!-- SUBSCRIBER EMAIL -->\r\n    <div class=\"input-group form-group-no-border\">\r\n      <span class=\"input-group-addon\">\r\n        <i class=\"now-ui-icons ui-1_email-85\"></i>\r\n      </span>\r\n      <input type=\"text\" formControlName=\"emailAddress\" class=\"form-control\" placeholder=\"Email...\">\r\n    </div>\r\n    <!-- SUBSCRIBE BUTTON -->\r\n    <button class=\"btn btn-neutral btn-round btn-lg\">Subscribe\r\n      <i class=\"fa fa-check ml-1\"></i>\r\n    </button>\r\n  </form>\r\n  <!-- SUBSCRIBE SIGN-UP FORM -->`\r\n})\r\nexport class SubscribeComponent extends ComponentBase implements OnInit { \r\n  @Output() subscribe = new EventEmitter<ServiceResponse>();\r\n  _form: FormGroup;\r\n  subscriber: Subscriber;\r\n  \r\n\r\n  constructor(\r\n    private securityService: BuildMotionSecurityService,\r\n    loggingService: LoggingService,\r\n    public formBuilder: FormBuilder,\r\n    router: Router\r\n  ) {\r\n    super('SubscribeComponent', loggingService, router)\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(): void {\r\n    this._form = this.formBuilder.group({\r\n      subscriberName: ['', Validators.required],\r\n      emailAddress: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  submitForm() {\r\n    this.securityService.serviceContext.Messages = [];\r\n    this.subscriber = new Subscriber(this._form.value.subscriberName, this._form.value.emailAddress);\r\n    this.subscribeUser(this.subscriber);\r\n  }\r\n\r\n  subscribeUser(subscriber: Subscriber) {\r\n    this.securityService.registerSubscriber(subscriber).subscribe(\r\n      response => this.handleSubscribeUser(response),\r\n      error => this.handleServiceErrors(error, this.securityService.serviceContext),\r\n      () => this.finishRequest(this.componentName)\r\n    );\r\n  }\r\n\r\n  handleSubscribeUser(response: ServiceResponse | ErrorResponse) {\r\n    const functionName = 'handleSubscribeUser';\r\n    this.loggingService.log(this.componentName, Severity.Information, `[${functionName}]: Preparing to handle the response from the [SecurityService] in the ${this.componentName}.`);\r\n    if (response) {\r\n      if (response.IsSuccess) {\r\n        this.loggingService.log(this.componentName, Severity.Information, `Successfully processed request to create subscriber. Prepare to download...`);\r\n        this.subscribe.emit(response as ServiceResponse);\r\n      } else {\r\n        this.handleServiceErrors(response as ErrorResponse, this.securityService.serviceContext);\r\n      }\r\n    } else {\r\n      // TODO: NEED TO HANDLE\r\n    }\r\n  }\r\n}\r\n"]}